{"version":3,"sources":["utilities/getDarkMode.ts","components/ComposeWindow/index.tsx","components/Navbar/index.tsx","components/Post/PostContent.tsx","components/Post/PostDate.tsx","components/ReplyWindow/index.tsx","components/ThreadPanel/index.js","components/Post/PostToolbar.tsx","utilities/anchorInBrowser.ts","components/Post/PostSensitive.tsx","utilities/getTrueInitials.ts","components/ProfilePanel/index.tsx","components/Post/BoostCard.tsx","components/Post/index.tsx","components/Post/PostRoll.tsx","components/Timeline/index.tsx","components/AccountPanel/index.tsx","components/ProfileContainer/index.tsx","components/RegisterWindow/index.tsx","components/NotificationPane/index.tsx","components/CustomIcons/index.js","App.tsx","serviceWorker.js","index.js"],"names":["getDarkMode","localStorage","getItem","ComposeWindow","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","client","state","status","media","media_data","visibility","spoiler_text","sensitive","hideDialog","hideSpoilerDialog","hideEmojiPicker","toggleVisibilityDialog","bind","assertThisInitialized","e","setState","target","value","_this2","filedialog","multiple","accept","then","images","uploadData","FormData","append","post","resp","console","log","id","data","media_id_array","media_data_array","push","key","fieldName","name","iconName","iconClassName","isIconOnly","minWidth","maxWidth","isPadded","rows","length","c","fileIcon","react_default","a","createElement","Icon","className","fileUrl","i","href","Number","url","media_ids","_this3","iconProps","onClick","postMediaForStatus","getVisibilityIcon","toggleEmojiPicker","_this4","setWarningButtonText","toggleSpoilerDialog","_this5","postStatus","event","option","checked","text","altText","style","fontWeight","emojiInsert","String","fromCodePoint","replace","_this6","CommandBar","items","getItems","overflowItems","getOverflowItems","farItems","getFarItems","ariaLabel","overflowButtonProps","menuIconProps","TextField","multiline","resizable","maxLength","onBlur","updateStatus","placeholder","data-emojiable","defaultValue","getSpoilerText","DetailsList","columns","getMediaItemColumns","getMediaItemRows","selectionMode","SelectionMode","none","layoutMode","DetailsListLayoutMode","justified","Dialog","hidden","onDismiss","dialogContentProps","type","DialogType","largeHeader","title","subText","setVisibilityContentText","modalProps","isBlocking","containerClassName","ChoiceGroup","options","onChange","_onChoiceChanged","DialogFooter","PrimaryButton","setWarningHeaderText","setWarningContentText","Toggle","defaultChecked","label","onText","offText","onSpoilerVisibilityChange","disabled","getTypeOfWarning","onSpoilerTextChange","Callout","ariaLabelledBy","ariaDescribedBy","role","gapSpace","document","getElementById","dist_default","onEmojiClick","addEmojiToStatus","emojiResolution","Component","Navbar","darkMode","window","confirm","clear","location","reload","setItem","navigator","userAgent","includes","appVersion","indexOf","paddingTop","getNavBar","renderMacTitleBarOnNavPadding","renderMacTitleBar","src","width","alt","data-toggle","data-target","aria-controls","aria-expanded","aria-label","TooltipHost","content","getDarkModeIcon","inlineLabel","undefined","styles","root","marginRight","toggleDarkMode","DefaultButton","logOut","PostContent","children","PostDate","date","ReplyWindow","hideReplyPanel","to","reply_count","replies_count","author","account","display_name","author_id","acct","original_status","getReplyOrMessage","reply_contents","hideVisibilityDialog","in_reply_to_id","JSON","parse","_this7","closeButton","color","&:hover","&:active","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","tempDiv","innerHTML","textContent","innerText","_this8","Panel","isOpen","closeReplyPanel","headerText","PanelType","medium","getPanelStyles","onRenderFooterContent","postReply","dangerouslySetInnerHTML","__html","stripOriginalStatus","discernVisibilityNoticeKeyword","giveVisibilityDialog","giveSpoilerDialog","giveEmojiDialog","_this9","ActionButton","data-automation-id","allowDisabledFocus","openPanel","replyOrThread","giveDialogBox","_this10","Link","fullButton","giveFullActionButton","giveSmallButton","ThreadPanel","status_thread_id","fromWhere","ancestors","descendants","hideThreadPanel","retrieveThread","get","map","ancestor","components_Post","nolink","nothread","bigShadow","descendant","closeThreadPanel","closeButtonAriaLabel","isLightDismiss","displayAncestors","displayOriginalStatus","displayDescendants","openThreadPanel","getThreadButton","getSmallThreadButton","getThreadPanel","PostToolbar","replies","favorites","favourites_count","boosts","reblogs_count","favorited","favourited","boosted","reblogged","favorite_toggle","noThread","hideDeleteDialog","toggle_favorite","toggle_boost","del","closeDeleteDialog","reblog","link","temporaryDiv","body","appendChild","select","execCommand","removeChild","Notification","components_ReplyWindow","components_ThreadPanel","getLinkAndCopy","checkIfUnlisted","openDeleteDialog","normal","deletePost","anchorInBrowser","links","querySelectorAll","Array","prototype","forEach","getAttribute","setAttribute","removeAttribute","classList","add","PostSensitive","modal","toggle","spoiler","ColorClassNames","redDarkBackground","redDarkBackgroundHover","white","whiteHover","toString","yellowBackground","yellowBackgroundHover","CompoundButton","primary","primaryOrNot","secondaryText","getAdditionalInformation","flagColorOfButton","media_attachments","description","getTrueInitials","getInitials","err","warn","concat","ProfilePanel","account_statuses","following","getAllRecentStatuses","getFollowStatus","toggleProfilePanel","checkDisplayName","item","fields","username","followers_count","following_count","statuses_count","Persona","assign","imageUrl","avatar","imageInitials","tertiaryText","getProfileMetadata","size","PersonaSize","size72","primaryText","textShadow","returnFollowStatusText","toggleFollow","checkFollowNotSelf","aria-describedby","limit","clickToThread","marginTop","header","backgroundColor","height","paddingLeft","paddingRight","boxShadow","margin","verticalAlign","filter","createProfileLinkByName","closeProfilePanel","getStyles","createProfilePersona","note","createProfileTable","showRecentStatuses","BoostCard","threadRef","React","createRef","documentCardStyles","actualContent","stripElementsFromContent","current","ref","DocumentCard","DocumentCardType","compact","getCardStyles","openChildThreadPanel","DocumentCardDetails","DocumentCardTitle","autoPlay","controls","shouldTruncate","showAsSecondaryTitle","DocumentCardActivity","activity","moment","created_at","format","people","components_ProfilePanel","profileImageSrc","initials","Post","noLink","x","error","application","index","getAuthorName","allAnchorTags","getElementsByTagName","parent","parentNode","nodeName","Post_PostSensitive","Post_BoostCard","getBigShadow","avatar_static","getPersonaText","Post_PostContent","getBoostCard","Post_PostToolbar","Post_PostDate","getApplicationName","getVisibility","PostRoll","streamListener","statuses","statusCount","count","parseInt","timeline","stream","on","local","messages","last_status","old_statuses","unshift","forceUpdate","msg","mes","delId","roll","splice","textAlign","getClearTimelineText","Timeline","what","agent","test","Pivot","linkSize","PivotLinkSize","large","PivotItem","getTextForTab","itemIcon","Post_PostRoll","AccountPanel","_Component","openBioDialog","openImageDialog","bioText","source","avatarPreview","headerPreview","inherits","createClass","toggleBioDialog","toggleImageDialog","getEditBioDialog","getChangeImagesDialog","updateBioText","publishBio","patch","stringify","getBackgroundUrl","uploadImage","renderNewAvatar","changeImages","cancelImageDialog","Error","upload","previewArray","URL","createObjectURL","header_static","ProfileUser","who","persona","components_AccountPanel","ProfileList","profile","ProfileContainer","ProfileContainer_ProfileUser","Label","ProfileContainer_ProfileList","RegisterWindow","instanceUrl","reauth","reauth_from_cookie","clientId","clientSecret","authUrl","authCode","toggle_reauth","_getErrorMessage","_getErrorMessagePromise","createAuthApp","Promise","resolve","setTimeout","vendor","instructions","standalone","baseurl","Mastodon","registerApp","scopes","appData","client_id","client_secret","fetchAccessToken","tokenData","token","accessToken","removeItem","catch","getMobilePWA","prefix","updateInstanceUrl","required","onGetErrorMessage","validateOnFocusOut","closePanel","getAccessToken","rel","updateAuthCode","NotificationPane","notifListener","notifications","notification","notif_set","sendDesktopNotification","toggleDeleteDialog","deleteNotifications","tempDivElement","onclick","focus","activityKey","activityDescription","getAuthorLink","getActivityDescription","ActivityItem","activityPersonas","comments","getActivityComment","timeStamp","getActivityDate","getDeleteLink","getDeleteDialog","createActivityList","registerIcons","icons","attachedFile","xmlns","viewBox","fill","d","boost","boostFill","darkModeOn","darkModeOff","directMessage","emojiPicker","favorite","favoriteFill","helpApp","homeApp","linkApp","localCommunity","overflowMenu","opacity","private","public","replyApp","thread","unlinkApp","unlisted","uploadMedia","warningApp","loadTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","App","checkLocalStorage","createMastodonApp","getAccountDetails","requestPermission","hideMacScrollbars","components_Navbar","components_ComposeWindow","components_Timeline","components_RegisterWindow","components_ProfileContainer","components_NotificationPane","Boolean","hostname","match","ReactDOM","render","src_App","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94c92123.chunk.js","sourcesContent":["/**\n * Checks localStorage and returns the list of classes\n * to append for a 'dark mode'.\n * @returns 'dark' or an empty string\n */\nexport function getDarkMode() {\n    if (localStorage.getItem('prefers-dark-mode') === \"true\") {\n        return 'dark';\n    } else {\n        return '';\n    }\n}","import React, { Component } from 'react';\nimport {\n    TextField,\n    CommandBar,\n    Dialog,\n    DialogFooter,\n    DialogType,\n    PrimaryButton,\n    IDialogContentProps,\n    ChoiceGroup,\n    DetailsList,\n    DetailsListLayoutMode,\n    SelectionMode,\n    Icon,\n    Toggle,\n    Callout\n} from \"office-ui-fabric-react\";\nimport {getDarkMode} from '../../utilities/getDarkMode';\nimport filedialog from 'file-dialog';\nimport EmojiPicker from 'emoji-picker-react';\nimport 'emoji-picker-react/dist/universal/style.scss';\nimport Mastodon, {Status} from 'megalodon';\n\ninterface IComposeWindowProps {\n    client: Mastodon;\n}\n\ninterface IComposeWindowState {\n    status: string;\n    media: [];\n    media_data: [];\n    visibility: string;\n    spoiler_text: string;\n    sensitive: boolean;\n    hideDialog: boolean | undefined;\n    hideSpoilerDialog: boolean | undefined;\n    hideEmojiPicker: boolean | undefined;\n}\n\n/**\n * Window for creating statuses. Generally used for composing new statuses\n * rather than replies.\n * \n * @param client The Mastodon client to perform posting actions with\n */\nclass ComposeWindow extends Component<IComposeWindowProps, IComposeWindowState> {\n\n    client: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            status: '',\n            media: [],\n            media_data: [],\n            visibility: 'public',\n            spoiler_text: '',\n            sensitive: false,\n            hideDialog: true,\n            hideSpoilerDialog: true,\n            hideEmojiPicker: true\n        };\n\n        this.client = this.props.client;\n        this.toggleVisibilityDialog = this.toggleVisibilityDialog.bind(this);\n    }\n\n    updateStatus(e: any) {\n        this.setState({\n            status: e.target.value\n        });\n    }\n\n    postMediaForStatus() {\n        let _this = this;\n        filedialog({\n            multiple: false,\n            accept: 'image/*, video/*'\n        }).then((images) => {\n            let uploadData = new FormData();\n\n            uploadData.append('file', images[0]);\n\n            _this.client.post('/media', uploadData)\n                .then((resp: any) => {\n                    console.log('Media uploaded!');\n                    let id = resp.data.id;\n                    let media_id_array = _this.state.media;\n                    let media_data_array = this.state.media_data;\n                    media_id_array.push(id as never);\n                    media_data_array.push(resp.data as never);\n                    _this.setState({\n                        media: media_id_array,\n                        media_data: media_data_array\n                    })\n                })\n        })\n    }\n\n    getMediaItemColumns() {\n        return [\n            {\n                key: 'fileIcon',\n                fieldName: 'fileIcon',\n                name: '',\n                value: 'File Icon',\n                iconName: 'attachedFile',\n                iconClassName: 'media-file-header-icon',\n                isIconOnly: false,\n                minWidth: 16,\n                maxWidth: 16,\n                isPadded: true\n\n            },\n            {\n                key: 'fileUrl',\n                name: '',\n                fieldName: 'fileUrl',\n                iconName: 'linkApp',\n                iconClassName: 'media-file-header-icon',\n                value: 'File URL',\n                minWidth: 24,\n                isPadded: true,\n                isIconOnly: false\n            }\n        ];\n    }\n\n    getMediaItemRows() {\n        let rows = [];\n        if (this.state.media_data.length === 0) {\n            let c = {\n                'fileIcon': <span><Icon iconName='helpApp' className=\"media-file-icon\"/></span>,\n                'fileUrl': 'No media uploaded'\n            };\n            let rows = [];\n            rows.push(c);\n            return rows;\n        } else {\n            for (let i in this.state.media_data) {\n                let c = {\n                    'fileIcon': <span><Icon iconName='attachedFile' className=\"media-file-icon\"/></span>,\n                    'fileUrl': <a href={(this.state.media_data[Number(i)] as any).url}>{(this.state.media_data[Number(i)] as any).url}</a>\n                };\n                rows.push(c);\n            }\n        }\n\n        return rows;\n    }\n\n    postStatus() {\n        this.client.post('/statuses', {\n            status: this.state.status,\n            media_ids: this.state.media,\n            visibility: this.state.visibility,\n            sensitive: this.state.sensitive,\n            spoiler_text: this.state.spoiler_text\n        });\n\n        this.setState({\n            media: [],\n            media_data: [],\n            status: '',\n            visibility: 'public',\n            sensitive: false,\n            spoiler_text: ''\n        });\n    }\n\n    getVisibilityIcon() {\n        if (this.state.visibility === 'public') {\n            return 'public';\n        } else if (this.state.visibility === 'unlisted') {\n            return 'unlisted';\n        } else if (this.state.visibility === 'private') {\n            return 'private';\n        } else {\n            return 'directMessage';\n        }\n    }\n\n    getSpoilerText() {\n        if (this.state.sensitive) {\n            return (<span className=\"my-1 ml-2\"><Icon iconName = \"warningApp\"/> <b>Warning: </b>{this.state.spoiler_text} </span>);\n        } else {\n            return (<span/>);\n        }\n    }\n\n    getItems(){\n        return [\n            {\n                key: 'media',\n                name: 'Upload media',\n                iconProps: {\n                    iconName: 'uploadMedia',\n                    className: 'toolbar-icon'\n                },\n                className: 'toolbar-icon',\n                onClick: () => this.postMediaForStatus()\n            },\n            {\n                key: 'visibility',\n                name: 'Set visibility',\n                iconProps: {\n                    iconName: this.getVisibilityIcon(),\n                    className: 'toolbar-icon'\n                },\n                className: 'toolbar-icon',\n                onClick: () => this.toggleVisibilityDialog()\n            },\n            {\n                key: 'emoji',\n                name: 'Add emoji',\n                iconProps: {\n                    iconName: 'emojiPicker',\n                    className: 'toolbar-icon'\n                },\n                className: 'toolbar-icon',\n                id: 'emojiPickerButton',\n                onClick: () => this.toggleEmojiPicker()\n            }\n        ];\n    };\n\n    getOverflowItems() {\n        return [\n            {\n                key: 'spoiler',\n                name: this.setWarningButtonText(),\n                iconProps: {\n                    iconName: 'warningApp',\n                    className: 'toolbar-icon'\n                },\n                className: 'toolbar-icon',\n                onClick: () => this.toggleSpoilerDialog()\n            }\n        ];\n    }\n\n    getFarItems(){\n        return [\n            {\n                key: 'post',\n                name: 'Post status',\n                iconProps: {\n                    iconName: 'postStatus',\n                    className: 'toolbar-icon'\n                },\n                className: 'toolbar-icon',\n                onClick: () => this.postStatus()\n            }\n        ];\n    };\n\n    toggleVisibilityDialog() {\n        this.setState({\n            hideDialog: !this.state.hideDialog\n        });\n    }\n\n    _onChoiceChanged(event: any, option: any) {\n        let _this = this;\n        _this.setState({\n            visibility: option.key\n        });\n    }\n\n    toggleSpoilerDialog() {\n        this.setState({\n            hideSpoilerDialog: !this.state.hideSpoilerDialog\n        })\n    }\n\n    onSpoilerVisibilityChange(event: any, checked: boolean | undefined) {\n        this.setState({\n            sensitive: !!checked\n        })\n        if (checked === false) {\n            this.setState({\n                spoiler_text: ''\n            })\n        }\n    }\n\n    onSpoilerTextChange(e: any) {\n        this.setState({\n            spoiler_text: e.target.value\n        })\n    }\n\n    setVisibilityContentText() {\n        let text = <p>Choose who gets to see your status. By default, new statuses are posted publicly.</p>;\n        let altText = '';\n        if (this.state.visibility === \"direct\") {\n            altText = <p><b style={{ fontWeight: 700}}>Note: you need to add the recipient/recipients by typing their username/handle to send the message.</b></p> as unknown as string\n        }\n\n        return <span>{text}{altText !== '' ? altText: <span/>}</span>;\n    }\n\n    setWarningButtonText() {\n        if (this.state.sensitive) {\n            return 'Change warning';\n        } else {\n            return 'Add warning';\n        }\n    }\n\n    setWarningHeaderText() {\n        if (this.state.sensitive) {\n            return 'Change or remove your warning';\n        } else {\n            return 'Add a warning';\n        }\n    }\n\n    setWarningContentText() {\n        if (this.state.sensitive) {\n            return 'Change or remove the warning on your post. This may be used to hide a spoiler or provide a warning of the contents of your post that may not be appropriate for all audiences.';\n        } else {\n            return 'Add a content warning to your post. This may be used to hide a spoiler or provide a warning of the contents of your post that may not be appropriate for all audiences.';\n        }\n    }\n\n    toggleEmojiPicker() {\n        this.setState({\n            hideEmojiPicker: !this.state.hideEmojiPicker\n        })\n    }\n\n    addEmojiToStatus(e: any) {\n        let emojiInsert = String.fromCodePoint((\"0x\" + e) as unknown as number);\n        console.log(e);\n        this.setState({\n            status: this.state.status + emojiInsert\n        });\n    }\n\n    getTypeOfWarning(event: any, option: any) {\n        if (option.key ==='none') {\n            let text = this.state.spoiler_text.replace('NSFW: ', '').replace('Spoiler: ', '');\n            this.setState({\n                spoiler_text: text\n            })\n        } else if (option.key === 'nsfw') {\n            this.setState({\n                spoiler_text: 'NSFW: ' + this.state.spoiler_text.replace('Spoiler: ', '')\n            })\n        } else if (option.key === 'spoiler') {\n            this.setState({\n                spoiler_text: 'Spoiler: ' + this.state.spoiler_text.replace('NSFW: ', '')\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div id = \"compose-window\" className = \"marked-area shadow-sm rounded p-1\">\n                <CommandBar\n                    items={this.getItems()}\n                    overflowItems={this.getOverflowItems()}\n                    farItems={this.getFarItems()}\n                    ariaLabel={'Use left and right arrow keys to navigate between commands'}\n                    overflowButtonProps={{ menuIconProps: {iconName: 'overflowMenu', iconClassName: 'toolbar-icons'}, className: 'toolbar-icon', name: 'More' }}\n                />\n                <TextField\n                    multiline={true}\n                    rows={5}\n                    resizable={false}\n                    maxLength={500}\n                    onBlur={e => this.updateStatus(e)}\n                    placeholder=\"What's on your mind?\"\n                    data-emojiable={true}\n                    defaultValue={this.state.status}\n                />\n                <p className=\"mt-1\">{this.getSpoilerText()}</p>\n                <DetailsList\n                    columns={this.getMediaItemColumns()}\n                    items={this.getMediaItemRows()}\n                    selectionMode={SelectionMode.none}\n                    layoutMode={DetailsListLayoutMode.justified}\n                />\n\n                {/* Visibility Dialog */}\n                <Dialog\n                    hidden={this.state.hideDialog}\n                    onDismiss={() => this.toggleVisibilityDialog()}\n                    dialogContentProps={{\n                        type: DialogType.largeHeader,\n                        title: 'Set your visibility',\n                        subText: this.setVisibilityContentText() as unknown as string\n                    }}\n                    modalProps={{\n                        isBlocking: false,\n                        containerClassName: 'ms-dialogMainOverride',\n                        className: getDarkMode()\n                    }}\n                    minWidth={500}\n                >\n                    <ChoiceGroup\n                        options={[\n                            {\n                                key: 'direct',\n                                id: 'message',\n                                text: 'Direct message'\n                            },\n                            {\n                                key: 'private',\n                                id: 'followers',\n                                text: 'Followers only',\n                            },\n                            {\n                                key: 'unlisted',\n                                id: 'unlisted',\n                                text: 'Public (unlisted)',\n                            },\n                            {\n                                key: 'public',\n                                id: 'public',\n                                text: 'Public (fediverse)',\n                                checked: true\n                            }\n                        ]}\n                        onChange={(event, option) => this._onChoiceChanged(event, option)}\n                    />\n                    <DialogFooter>\n                        <PrimaryButton onClick={() => this.toggleVisibilityDialog()} text=\"Set\" />\n                    </DialogFooter>\n                </Dialog>\n\n                {/* Spoiler Dialog */}\n                <Dialog\n                    hidden={this.state.hideSpoilerDialog}\n                    onDismiss={() => this.toggleSpoilerDialog()}\n                    dialogContentProps={{\n                        type: DialogType.largeHeader,\n                        title: this.setWarningHeaderText(),\n                        subText: this.setWarningContentText()\n                    }}\n                    modalProps={{\n                        isBlocking: true,\n                        containerClassName: 'ms-dialogMainOverride',\n                        className: getDarkMode()\n                    }}\n                    minWidth={500}\n                >\n                    <Toggle\n                        defaultChecked={this.state.sensitive}\n                        label=\"Add a warning\"\n                        onText=\"On\"\n                        offText=\"Off\"\n                        onChange={(event, checked) => this.onSpoilerVisibilityChange(event, checked)}\n                    />\n                    <ChoiceGroup\n                        disabled={!this.state.sensitive}\n                        options={[\n                            {\n                                key: 'none',\n                                id: 'nospecial',\n                                text: \"Don't mark specifically\",\n                                checked: true\n                            },\n                            {\n                                key: 'nsfw',\n                                id: 'nsfw',\n                                text: \"Mark as NSFW\"\n                            },\n                            {\n                                key: 'spoiler',\n                                id: 'spoiler',\n                                text: \"Mark as a spoiler\"\n                            }\n                        ]}\n                        onChange={(event, option) => this.getTypeOfWarning(event, option)}\n                    />\n                    <TextField\n                        multiline={true}\n                        rows={5}\n                        resizable={false}\n                        label=\"Warning text\"\n                        onBlur={(e) => this.onSpoilerTextChange(e)}\n                        defaultValue={this.state.spoiler_text}\n                    />\n                    <DialogFooter>\n                        <PrimaryButton onClick={() => this.toggleSpoilerDialog()} text=\"Save\" />\n                    </DialogFooter>\n                </Dialog>\n\n                {/* Emoji Callout */}\n                <Callout\n                    ariaLabelledBy={'callout-label-1'}\n                    ariaDescribedBy={'callout-description-1'}\n                    role={'alertdialog'}\n                    gapSpace={0}\n                    hidden={this.state.hideEmojiPicker}\n                    target={document.getElementById('emojiPickerButton')}\n                >\n                    <EmojiPicker onEmojiClick={(e: Event) => this.addEmojiToStatus(e)} emojiResolution={64}/>\n                </Callout>\n            </div>\n        );\n    }\n}\n\nexport default ComposeWindow;","import React, { Component } from 'react';\nimport {Icon, Toggle, TooltipHost, DefaultButton} from 'office-ui-fabric-react';\n\ninterface INavbarState {\n    darkMode: boolean | undefined;\n}\n\n/**\n * Basic navigation bar. Contains logo, name, and log out button.\n */\nclass Navbar extends Component<any, INavbarState> {\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            darkMode: (localStorage.getItem('prefers-dark-mode') === \"true\")\n        }\n    }\n\n    logOut() {\n        let prompt = window.confirm(\"Are you sure you want to log out? You'll need to remove Hyperspace from your list of authorized apps and log in again.\");\n        if (prompt) {\n            localStorage.clear();\n            window.location.reload();\n        }\n    }\n\n    getDarkModeIcon() {\n        if (localStorage.getItem('prefers-dark-mode') === \"true\") {\n            return 'darkModeOn';\n        } else {\n            return 'darkModeOff';\n        }\n    }\n\n    toggleDarkMode(event: any, checked: Boolean) {\n        localStorage.setItem('prefers-dark-mode', String(!!checked));\n        this.setState({\n            darkMode: !!checked\n        });\n        window.location.reload();\n    }\n\n    getNavBar() {\n        if (localStorage.getItem('prefers-dark-mode') === \"true\") {\n            return 'navbar-dark';\n        } else {\n            return 'navbar-light';\n        }\n    }\n\n    renderMacTitleBarOnNavPadding() {\n        if (navigator.userAgent.includes(\"Electron\") && navigator.appVersion.indexOf(\"Mac\") !== -1) {\n            return {\n                paddingTop: 32\n            };\n        }\n    }\n\n    renderMacTitleBar() {\n        if (navigator.userAgent.includes(\"Electron\") && navigator.appVersion.indexOf(\"Mac\") !== -1) {\n            return (\n                <div className = \"m-0 p-0 mac-title-bar\">\n                    <p>Hyperspace</p>\n                </div>\n        );\n        }\n    }\n\n    render() {\n        return (\n            <nav \n                className={\"navbar navbar-expand-lg navbar-app fixed-top \" + this.getNavBar()}\n                style={this.renderMacTitleBarOnNavPadding()}\n            >\n                {this.renderMacTitleBar()}\n                <span className=\"navbar-brand\"><img src=\"hyperspace48.png\" style={{ width: '24px'}} alt=\"Hyperspace logo\"/>&nbsp;hyperspace</span>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                            {\n                                localStorage.length > 0 ?\n                                <ul className=\"navbar-nav ml-auto\">\n                                    <TooltipHost content=\"Toggle the dark or light theme.\">\n                                        <Toggle\n                                                label={<Icon iconName={this.getDarkModeIcon()}/> as unknown as string}\n                                                inlineLabel={true}\n                                                defaultChecked={this.state.darkMode || undefined}\n                                                styles={{root: {marginRight: 12}}}\n                                                onChange={(event:any, checked:any) => this.toggleDarkMode(event, checked)}\n                                            />\n                                    </TooltipHost>\n                                    <TooltipHost content=\"Log out of Hyperspace. You will need to adjust your account settings to revoke this app's access.\">\n                                        <DefaultButton text=\"Log out\" onClick={() => this.logOut()}/>\n                                    </TooltipHost>\n                                    </ul>:\n                                    <span/>\n                            }\n                </div> \n            </nav>\n        );\n    }\n}\n\nexport default Navbar;","import React, {Component} from 'react';\n\nclass PostContent extends Component {\n    render() {\n        return (\n            <div className=\"post-content\">{this.props.children}</div>\n        );\n    }\n}\n\nexport default PostContent;","import React, {Component} from 'react';\n\ninterface IPostDateProps {\n    date: String;\n}\n\nclass PostDate extends Component<IPostDateProps> {\n    render() {\n        return (\n            <small className = \"text-muted\">{this.props.date}</small>\n        );\n    }\n}\n\nexport default PostDate;","import React, {Component} from 'react';\nimport {\n    Dialog,\n    DialogFooter,\n    DialogType,\n    Panel,\n    PanelType,\n    CommandBar,\n    PrimaryButton,\n    DefaultButton,\n    ActionButton,\n    TextField,\n    Link, Icon, SelectionMode, DetailsListLayoutMode, DetailsList, ChoiceGroup, Toggle, Callout\n} from 'office-ui-fabric-react';\nimport {getDarkMode} from \"../../utilities/getDarkMode\";\nimport filedialog from 'file-dialog';\nimport EmojiPicker from 'emoji-picker-react';\nimport 'emoji-picker-react/dist/universal/style.scss';\nimport Mastodon from 'megalodon';\n\ninterface IReplyWindowProps {\n    client: Mastodon;\n    status: any;\n    className?: string;\n    fullButton: boolean;\n    to?: number;\n}\n\ninterface IReplyWindowState {\n    hideReplyPanel: boolean;\n    to: number;\n    reply_count: number;\n    author: string;\n    author_id: string;\n    original_status: any;\n    reply_contents: string;\n    visibility: string | undefined;\n    media: [];\n    media_data: [];\n    spoiler_text: string;\n    sensitive: boolean | undefined;\n    hideSpoilerDialog: boolean;\n    hideEmojiPicker: boolean;\n    hideVisibilityDialog: boolean;\n}\n\n/**\n * Offspring of the ComposeWindow component. Displays a status and\n * offers a compose window for crafting a reply to the post.\n * \n * @param client The client used to post the reply with\n * @param status The status to reply to\n */\nclass ReplyWindow extends Component<IReplyWindowProps, IReplyWindowState> {\n\n    client: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            hideReplyPanel: true,\n            to: this.props.status.id,\n            reply_count: this.props.status.replies_count,\n            author: this.props.status.account.display_name,\n            author_id: this.props.status.account.acct,\n            original_status: this.getReplyOrMessage(this.props.status),\n            reply_contents: '@' + this.props.status.account.acct + ': ',\n            visibility: this.props.status.visibility,\n            media: [],\n            media_data: [],\n            spoiler_text: '',\n            sensitive: false,\n            hideSpoilerDialog: true,\n            hideEmojiPicker: true,\n            hideVisibilityDialog: true\n        };\n\n        this.client = this.props.client;\n    }\n\n    getReplyOrMessage(status: any) {\n        if (status.visibility === \"direct\") {\n            return status.account.display_name + ' messaged you: ' + status.content;\n        } else {\n            return status.account.display_name + ' originally posted: ' + status.content;\n        }\n    }\n\n    toggleVisibilityDialog() {\n        this.setState({\n            hideVisibilityDialog: !this.state.hideVisibilityDialog\n        })\n    }\n\n    openPanel() {\n        this.setState({\n            hideReplyPanel: false\n        })\n    }\n\n    closeReplyPanel() {\n        this.setState({\n            hideReplyPanel: true\n        })\n    }\n\n    updateStatus(e: any) {\n        this.setState({\n            reply_contents: e.target.value\n        });\n    }\n\n    postReply() {\n        this.client.post('/statuses', {\n            status: this.state.reply_contents,\n            in_reply_to_id: this.state.to,\n            visibility: this.state.visibility,\n            sensitive: this.state.sensitive,\n            spoiler_text: this.state.spoiler_text,\n            media_ids: this.state.media\n        });\n        this.setState({\n            hideReplyPanel: true\n        })\n    }\n\n    replyOrThread() {\n        if (this.state.author_id === JSON.parse(localStorage.getItem('account') || \"\").acct) {\n            return 'Continue';\n        } else {\n            return 'Reply';\n        }\n    }\n\n    discernVisibilityNoticeKeyword() {\n        if (this.state.visibility === \"direct\") {\n            return 'private message';\n        } else {\n            return this.state.visibility + ' status';\n        }\n    }\n\n    postMediaForStatus() {\n        let _this = this;\n        filedialog({\n            multiple: false,\n            accept: 'image/*, video/*'\n        }).then((images) => {\n            let uploadData = new FormData();\n\n            uploadData.append('file', images[0]);\n\n            _this.client.post('/media', uploadData)\n                .then((resp: any) => {\n                    console.log('Media uploaded!');\n                    let id = resp.data.id;\n                    let media_id_array = _this.state.media;\n                    let media_data_array = this.state.media_data;\n                    media_id_array.push(id as never);\n                    media_data_array.push(resp.data as never);\n                    _this.setState({\n                        media: media_id_array,\n                        media_data: media_data_array\n                    })\n                })\n        })\n    }\n\n    getMediaItemColumns() {\n        return [\n            {\n                key: 'fileIcon',\n                fieldName: 'fileIcon',\n                value: 'File Icon',\n                iconName: 'attachedFile',\n                iconClassName: 'media-file-header-icon',\n                isIconOnly: false,\n                name: '',\n                minWidth: 16,\n                maxWidth: 16,\n                isPadded: true\n\n            },\n            {\n                key: 'fileUrl',\n                fieldName: 'fileUrl',\n                iconName: 'linkApp',\n                iconClassName: 'media-file-header-icon',\n                value: 'File URL',\n                name: '',\n                minWidth: 24,\n                isPadded: true,\n                isIconOnly: false\n            }\n        ];\n    }\n\n    getMediaItemRows() {\n        let rows = [];\n        if (this.state.media_data.length === 0) {\n            let c = {\n                'fileIcon': <span><Icon iconName='helpApp' className=\"media-file-icon\"/></span>,\n                'fileUrl': 'No media uploaded'\n            };\n            let rows = [];\n            rows.push(c);\n            return rows;\n        } else {\n            for (let i in this.state.media_data) {\n                let c = {\n                    'fileIcon': <span><Icon iconName='attachedFile' className=\"media-file-icon\"/></span>,\n                    'fileUrl': <a href={(this.state.media_data[i] as any).url}>{(this.state.media_data[i] as any).url}</a>\n                };\n                rows.push(c);\n            }\n        }\n\n        return rows;\n    }\n\n    getVisibilityIcon() {\n        if (this.state.visibility === 'public') {\n            return 'public';\n        } else if (this.state.visibility === 'unlisted') {\n            return 'unlisted';\n        } else if (this.state.visibility === 'private') {\n            return 'private';\n        } else {\n            return 'directMessage';\n        }\n    }\n\n    getSpoilerText() {\n        if (this.state.sensitive) {\n            return (<span className=\"my-1 ml-2\"><Icon iconName = \"warningApp\"/> <b>Warning: </b>{this.state.spoiler_text} </span>);\n        } else {\n            return (<span/>);\n        }\n    }\n\n    getItems(){\n        return [\n            {\n                key: 'media',\n                name: 'Upload media',\n                iconProps: {\n                    iconName: 'uploadMedia',\n                    className: 'toolbar-icon'\n                },\n                className: 'toolbar-icon',\n                onClick: () => this.postMediaForStatus()\n            },\n            {\n                key: 'visibility',\n                name: 'Change visibility',\n                iconProps: {\n                    iconName: this.getVisibilityIcon(),\n                    className: 'toolbar-icon'\n                },\n                className: 'toolbar-icon',\n                onClick: () => this.toggleVisibilityDialog()\n            },\n            {\n                key: 'emoji',\n                name: 'Add emoji',\n                iconProps: {\n                    iconName: 'emojiPicker',\n                    className: 'toolbar-icon'\n                },\n                className: 'toolbar-icon',\n                id: 'emojiPickerReplyButton',\n                onClick: () => this.toggleEmojiPicker()\n            }\n        ];\n    };\n\n    getOverflowItems() {\n        return [\n            {\n                key: 'spoiler',\n                name: this.setWarningButtonText(),\n                iconProps: {\n                    iconName: 'warningApp',\n                    className: 'toolbar-icon'\n                },\n                className: 'toolbar-icon',\n                onClick: () => this.toggleSpoilerDialog()\n            }\n        ];\n    }\n\n    _onChoiceChanged(event: any, option: any) {\n        let _this = this;\n        _this.setState({\n            visibility: option.key\n        });\n    }\n\n    toggleSpoilerDialog() {\n        this.setState({\n            hideSpoilerDialog: !this.state.hideSpoilerDialog\n        })\n    }\n\n    onSpoilerVisibilityChange(event: any, checked: boolean) {\n        this.setState({\n            sensitive: !!checked\n        });\n        if (checked === false) {\n            this.setState({\n                spoiler_text: ''\n            })\n        }\n    }\n\n    onSpoilerTextChange(e: any) {\n        this.setState({\n            spoiler_text: e.target.value\n        })\n    }\n\n    setVisibilityContentText() {\n        let text = <p>Choose who gets to see your reply.</p>;\n        let altText = '';\n        if (this.state.visibility === \"direct\") {\n            altText = <p><b style={{ fontWeight: 700}}>Note: you need to add the recipient/recipients by typing their username/handle to send the message.</b></p> as unknown as string\n        }\n\n        return <span>{text}{altText !== '' ? altText: <span/>}</span>;\n    }\n\n    setWarningButtonText() {\n        if (this.state.sensitive) {\n            return 'Change warning';\n        } else {\n            return 'Add warning';\n        }\n    }\n\n    setWarningHeaderText() {\n        if (this.state.sensitive) {\n            return 'Change or remove your warning';\n        } else {\n            return 'Add a warning';\n        }\n    }\n\n    setWarningContentText() {\n        if (this.state.sensitive) {\n            return 'Change or remove the warning on your post. This may be used to hide a spoiler or provide a warning of the contents of your post that may not be appropriate for all audiences.';\n        } else {\n            return 'Add a content warning to your post. This may be used to hide a spoiler or provide a warning of the contents of your post that may not be appropriate for all audiences.';\n        }\n    }\n\n    toggleEmojiPicker() {\n        this.setState({\n            hideEmojiPicker: !this.state.hideEmojiPicker\n        })\n    }\n\n    addEmojiToStatus(e: any) {\n        let emojiInsert = String.fromCodePoint(Number(\"0x\" + e));\n        console.log(e);\n        this.setState({\n            reply_contents: this.state.reply_contents + emojiInsert\n        });\n    }\n\n    getTypeOfWarning(event: any, option: any) {\n        if (option.key ==='none') {\n            let text = this.state.spoiler_text.replace('NSFW: ', '').replace('Spoiler: ', '');\n            this.setState({\n                spoiler_text: text\n            })\n        } else if (option.key === 'nsfw') {\n            this.setState({\n                spoiler_text: 'NSFW: ' + this.state.spoiler_text.replace('Spoiler: ', '')\n            })\n        } else if (option.key === 'spoiler') {\n            this.setState({\n                spoiler_text: 'Spoiler: ' + this.state.spoiler_text.replace('NSFW: ', '')\n            })\n        }\n    }\n\n    giveVisibilityDialog() {\n        return (\n        <Dialog\n            hidden={this.state.hideVisibilityDialog}\n            onDismiss={() => this.toggleVisibilityDialog()}\n            dialogContentProps={{\n                type: DialogType.largeHeader,\n                title: 'Set your visibility',\n                subText: this.setVisibilityContentText() as unknown as string\n            }}\n            modalProps={{\n                isBlocking: false,\n                containerClassName: 'ms-dialogMainOverride',\n                className: getDarkMode()\n            }}\n            minWidth={500}\n        >\n            <ChoiceGroup\n                options={[\n                    {\n                        key: 'direct',\n                        id: 'message',\n                        text: 'Direct message'\n                    },\n                    {\n                        key: 'private',\n                        id: 'followers',\n                        text: 'Followers only',\n                    },\n                    {\n                        key: 'unlisted',\n                        id: 'unlisted',\n                        text: 'Public (unlisted)',\n                    },\n                    {\n                        key: 'public',\n                        id: 'public',\n                        text: 'Public (fediverse)',\n                        checked: true\n                    }\n                ]}\n                onChange={(event, option) => this._onChoiceChanged(event, option)}\n            />\n            <DialogFooter>\n                <PrimaryButton onClick={() => this.toggleVisibilityDialog()} text=\"Set\" />\n            </DialogFooter>\n        </Dialog>\n        );\n    }\n\n    giveEmojiDialog() {\n        return (<Callout\n            ariaLabelledBy={'callout-label-1'}\n            ariaDescribedBy={'callout-description-1'}\n            role={'alertdialog'}\n            gapSpace={0}\n            hidden={this.state.hideEmojiPicker}\n            target={document.getElementById('emojiPickerReplyButton')}\n        >\n            <EmojiPicker onEmojiClick={(e: any) => this.addEmojiToStatus(e)} emojiResolution={64}/>\n        </Callout>);\n    }\n\n    giveSpoilerDialog() {\n        return (<Dialog\n            hidden={this.state.hideSpoilerDialog}\n            onDismiss={() => this.toggleSpoilerDialog()}\n            dialogContentProps={{\n                type: DialogType.largeHeader,\n                title: this.setWarningHeaderText(),\n                subText: this.setWarningContentText()\n            }}\n            modalProps={{\n                isBlocking: true,\n                containerClassName: 'ms-dialogMainOverride',\n                className: getDarkMode()\n            }}\n            minWidth={500}\n        >\n            <Toggle\n                defaultChecked={this.state.sensitive}\n                label=\"Add a warning\"\n                onText=\"On\"\n                offText=\"Off\"\n                onChange={(event, checked) => this.onSpoilerVisibilityChange(event, checked as boolean)}\n            />\n            <ChoiceGroup\n                disabled={!this.state.sensitive}\n                options={[\n                    {\n                        key: 'none',\n                        id: 'nospecial',\n                        text: \"Don't mark specifically\",\n                        checked: true\n                    },\n                    {\n                        key: 'nsfw',\n                        id: 'nsfw',\n                        text: \"Mark as NSFW\"\n                    },\n                    {\n                        key: 'spoiler',\n                        id: 'spoiler',\n                        text: \"Mark as a spoiler\"\n                    }\n                ]}\n                onChange={(event, option) => this.getTypeOfWarning(event, option)}\n            />\n            <TextField\n                multiline={true}\n                rows={5}\n                resizable={false}\n                label=\"Warning text\"\n                onBlur={(e) => this.onSpoilerTextChange(e)}\n                defaultValue={this.state.spoiler_text}\n            />\n            <DialogFooter>\n                <PrimaryButton onClick={() => this.toggleSpoilerDialog()} text=\"Save\" />\n            </DialogFooter>\n        </Dialog>);\n    }\n\n    getPanelStyles() {\n        return {\n            closeButton: {\n                color: 'transparent',\n                \"&:hover\": {\n                    color: 'transparent !important'\n                },\n                \"&:active\": {\n                    color: 'transparent !important'\n                },\n                backgroundImage: 'url(\\'close.svg\\')',\n                backgroundPosition: 'center',\n                backgroundRepeat: 'no-repeat',\n                backgroundSize: '50%'\n            }\n        }\n    }\n\n    stripOriginalStatus(status: any) {\n        let tempDiv = document.createElement('div');\n        tempDiv.innerHTML = status;\n        return (tempDiv.textContent || tempDiv.innerText || \"\");\n    }\n\n    giveDialogBox() {\n        return (\n            <Panel\n                isOpen={!this.state.hideReplyPanel}\n                onDismiss={() => this.closeReplyPanel()}\n                headerText={\"Reply to \" + this.state.author}\n                type={PanelType.medium}\n                styles={this.getPanelStyles()}\n                className={getDarkMode()}\n                onRenderFooterContent={() => {return (\n                            <div>\n                                <PrimaryButton\n                                    onClick={() => this.postReply()}\n                                    style={{marginRight: '8px'}}\n                                    text=\"Post reply\"\n                                />\n                                <DefaultButton\n                                    onClick={() => this.closeReplyPanel()}\n                                    text=\"Cancel\"\n                                />\n                            </div>\n                        )\n                    ;}\n                }\n            >\n                <div id=\"compose-window\" className = \"p-3 rounded\">\n                    <div dangerouslySetInnerHTML={{__html: this.stripOriginalStatus(this.state.original_status)}}/>\n                    <p className=\"mt-2\">Note: your reply will be sent as a <b>{this.discernVisibilityNoticeKeyword()}.</b></p>\n                    <p className=\"mt-1\">{this.getSpoilerText()}</p>\n                    <CommandBar\n                        items={this.getItems()}\n                        overflowItems={this.getOverflowItems()}\n                        ariaLabel={'Use left and right arrow keys to navigate between commands'}\n                        overflowButtonProps={{ menuIconProps: {iconName: 'overflowMenu', iconClassName: 'toolbar-icons'}, className: 'toolbar-icon', name: 'More' }}\n                    />\n                    <TextField\n                    multiline={true}\n                    rows={5}\n                    resizable={false}\n                    maxLength={500}\n                    onBlur={e => this.updateStatus(e)}\n                    placeholder=\"Type your reply here...\"\n                    defaultValue={this.state.reply_contents}\n                    />\n                    <DetailsList\n                        columns={this.getMediaItemColumns()}\n                        items={this.getMediaItemRows()}\n                        selectionMode={SelectionMode.none}\n                        layoutMode={DetailsListLayoutMode.justified}\n                    />\n                </div>\n\n                {this.giveVisibilityDialog()}\n                {this.giveSpoilerDialog()}\n                {this.giveEmojiDialog()}\n\n            </Panel>\n        );\n    }\n\n    giveFullActionButton() {\n        return (<div>\n            <ActionButton\n                data-automation-id=\"test\"\n                iconProps={{ iconName: 'replyApp', className: 'post-toolbar-icon' }}\n                allowDisabledFocus={true}\n                disabled={false}\n                checked={false}\n                onClick={() => this.openPanel()}\n                className={'post-toolbar-icon ' + this.props.className}\n            >\n                <span className=\"d-none d-md-block\">{this.replyOrThread()} ({this.state.reply_count})</span>\n            </ActionButton>\n            {this.giveDialogBox()}\n        </div>);\n    }\n\n    giveSmallButton() {\n        return (\n            <span>\n                <Link\n                    onClick={() => this.openPanel()}\n                    className={this.props.className}\n                ><b>Reply</b></Link>\n                {this.giveDialogBox()}\n            </span>\n        );\n    }\n\n    render() {\n        if (this.props.fullButton === true) {\n            return this.giveFullActionButton();\n        } else {\n            return this.giveSmallButton();\n        }\n    }\n}\n\nexport default ReplyWindow;","import React, { Component } from 'react';\nimport {\n    ActionButton,\n    Link,\n    Panel,\n    PanelType\n} from 'office-ui-fabric-react';\nimport Post from '../Post';\nimport {getDarkMode} from \"../../utilities/getDarkMode\";\n\n/**\n * The panel that displays a thread of statuses in order.\n * \n * @param fromWhere The status ID to get a thread for\n * @param client The client used to get/post information with\n * @param fullButton Whether the button should be rendered as a toolbar item or a small text button\n */\nclass ThreadPanel extends Component {\n\n    client;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            status_thread_id: this.props.fromWhere,\n            ancestors: [],\n            status: '',\n            descendants: [],\n            hideThreadPanel: true\n        }\n\n        this.client = this.props.client;\n    }\n\n    openThreadPanel() {\n        this.setState({\n            hideThreadPanel: false\n        });\n        this.retrieveThread();\n    }\n\n    closeThreadPanel() {\n        this.setState({\n            hideThreadPanel: true\n        });\n    }\n\n    retrieveThread() {\n        let _this = this;\n\n        //Get the original post\n        this.client.get('/statuses/' + this.state.status_thread_id)\n            .then( (resp) => {\n                _this.setState({\n                    status: resp.data\n                })\n            });\n\n        // Then get the context of it\n        this.client.get('/statuses/' + this.state.status_thread_id + '/context')\n            .then( (resp) => {\n                    _this.setState({\n                        ancestors: resp.data.ancestors,\n                        descendants: resp.data.descendants\n                    })\n                }\n            );\n    }\n\n    displayAncestors() {\n        if (this.state.ancestors.length > 0) {\n            return (\n                <div>\n                    {\n                        this.state.ancestors.map( (ancestor) => {\n                            return(\n                                <div className=\"m-2\">\n                                    <Post\n                                        key={ancestor.id}\n                                        client={this.client}\n                                        status={ancestor}\n                                        nolink={false}\n                                        nothread={false}\n                                    />\n                                </div>\n                            );\n                        } )\n                    }\n                </div>\n            )\n        }\n    }\n\n    displayOriginalStatus() {\n        if (this.state.status !== '') {\n            return (\n                <div>\n                    <Post\n                        key={this.state.status_thread_id}\n                        client={this.client}\n                        status={this.state.status}\n                        nolink={false}\n                        nothread={true}\n                        bigShadow={true}\n                    />\n                </div>\n            )\n        }\n    }\n\n    displayDescendants() {\n        if (this.state.descendants.length > 0) {\n            return (\n                <div>\n                    {\n                        this.state.descendants.map( (descendant) => {\n                            return(\n                                <div className=\"m-2\">\n                                    <Post\n                                        key={descendant.id}\n                                        client={this.client}\n                                        status={descendant}\n                                        nolink={false}\n                                        nothread={true}\n                                    />\n                                </div>\n                            );\n                        } )\n                    }\n                </div>\n            )\n        }\n    }\n\n    getPanelStyles() {\n        return {\n            closeButton: {\n                color: 'transparent',\n                \"&:hover\": {\n                    color: 'transparent !important'\n                },\n                \"&:active\": {\n                    color: 'transparent !important'\n                },\n                backgroundImage: 'url(\\'close.svg\\')',\n                backgroundPosition: 'center',\n                backgroundRepeat: 'no-repeat',\n                backgroundSize: '50%'\n            }\n        }\n    }\n\n    getThreadPanel() {\n        return(\n            <Panel\n                isOpen={!this.state.hideThreadPanel}\n                type={PanelType.medium}\n                onDismiss={() => this.closeThreadPanel()}\n                closeButtonAriaLabel=\"Close\"\n                headerText=\"View thread\"\n                isLightDismiss={true}\n                styles={this.getPanelStyles()}\n                className={getDarkMode()}\n            >\n                <div>\n                    {this.displayAncestors()}\n                    {this.displayOriginalStatus()}\n                    {this.displayDescendants()}\n                </div>\n            </Panel>\n        );\n    }\n\n\n    getThreadButton() {\n        return (\n            <ActionButton\n                iconProps={{ iconName: 'thread', className: 'post-toolbar-icon' }}\n                allowDisabledFocus={true}\n                disabled={false}\n                checked={false}\n                href={this.state.url}\n                className='post-toolbar-icon'\n                onClick={() => this.openThreadPanel()}\n            > <span className=\"d-none d-md-block\">Show thread</span>\n            </ActionButton>\n        );\n    }\n\n    getSmallThreadButton() {\n        return (\n            <Link onClick={() => this.openThreadPanel()}><b>View thread</b></Link>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.props.fullButton !== null ?\n                    (this.props.fullButton === true ?\n                    this.getThreadButton():\n                    this.getSmallThreadButton()):\n                    <span/>\n                }\n                {this.getThreadPanel()}\n            </div>\n        );\n    }\n}\n\nexport default ThreadPanel;","import React, {Component} from 'react';\nimport {ActionButton, TooltipHost, Dialog, DialogType, DialogFooter, PrimaryButton, DefaultButton} from \"office-ui-fabric-react\";\nimport ReplyWindow from '../ReplyWindow';\nimport ThreadPanel from '../ThreadPanel';\nimport { getDarkMode } from '../../utilities/getDarkMode';\nimport Mastodon, { Status } from 'megalodon';\n\ninterface IPostToolbarProps {\n    client: Mastodon;\n    status: any;\n    nothread: boolean | undefined;\n}\n\ninterface IPostToolbarState {\n    id: number;\n    replies: number;\n    favorites: number;\n    boosts: number;\n    favorited: boolean | null;\n    boosted: boolean | null;\n    favorite_toggle: boolean | undefined;\n    url: string;\n    noThread: boolean | undefined;\n    hideDeleteDialog: boolean | undefined;\n}\n\n/**\n * A small toolbar including common actions for interacting with\n * a post.\n * \n * @param client The client used to ineract with a post.\n * @param status The post to interact with.\n * @param nothread Whether to hide the 'Show thread' button\n */\nclass PostToolbar extends Component<IPostToolbarProps, IPostToolbarState> {\n\n    client: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.client = this.props.client;\n\n        this.state = {\n            id: this.props.status.id,\n            replies: this.props.status.replies_count,\n            favorites: this.props.status.favourites_count,\n            boosts: this.props.status.reblogs_count,\n            favorited: this.props.status.favourited,\n            boosted: this.props.status.reblogged,\n            favorite_toggle: this.props.status.favourited,\n            url: this.props.status.url,\n            noThread: this.props.nothread,\n            hideDeleteDialog: true\n        };\n\n        this.toggle_favorite = this.toggle_favorite.bind(this);\n        this.toggle_boost = this.toggle_boost.bind(this);\n    }\n\n    openDeleteDialog() {\n        this.setState({hideDeleteDialog: false})\n    }\n\n    deletePost() {\n        this.client.del('/statuses/' + this.state.id)\n        .then(() => {\n            this.closeDeleteDialog();\n        })\n    }\n\n    closeDeleteDialog() {\n        this.setState({hideDeleteDialog: true})\n    }\n\n    toggle_favorite() {\n        let _this = this;\n        if (this.state.favorited) {\n            this.client.post('/statuses/' + this.state.id + '/unfavourite')\n                .then((status: Status) => {\n                    this.setState({\n                        favorited: false,\n                        favorites: _this.state.favorites - 1\n                    });\n                });\n        } else {\n            this.client.post('/statuses/' + this.state.id + '/favourite')\n                .then((status: Status) => {\n                    this.setState({\n                        favorited: true,\n                        favorites: _this.state.favorites + 1\n                    });\n                });\n        }\n    }\n\n    toggle_boost() {\n        let _this = this;\n        if (this.state.boosted) {\n            this.client.post('/statuses/' + this.state.id + '/unreblog')\n                .then((status: Status) => {\n                    this.setState({\n                        boosted: false,\n                        boosts: _this.state.boosts - 1\n                    });\n                });\n        } else {\n            this.client.post('/statuses/' + this.state.id + '/reblog')\n                .then((status: Status) => {\n                    this.setState({\n                        boosted: true,\n                        boosts: _this.state.boosts + 1\n                    });\n                });\n        }\n    }\n\n    checkIfUnlisted() {\n        if (this.props.status.reblog) {\n            return 'This status is a boost of another.';\n        } else {\n            let visibility = this.props.status.visibility;\n            if (visibility === 'private') {\n                return 'The author made this status visible to their followers only.';\n            } else if (visibility === 'direct') {\n                return 'The author made this status visible only to you.';\n            } else {\n                return 'We couldn\\'t fetch the link for this post.';\n            }\n        }\n    }\n\n    getLinkAndCopy(link: string) {\n        let temporaryDiv = document.createElement(\"textarea\");\n        temporaryDiv.value = link;\n        document.body.appendChild(temporaryDiv);\n        temporaryDiv.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(temporaryDiv);\n\n        new Notification(\"Link copied!\", {\n            body: \"Feel free to paste this wherever you need it!\"\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <ul className=\"nav\" id=\"post-toolbar\">\n                    <li>\n                        <ReplyWindow status={this.props.status} client={this.props.client} fullButton={true}/>\n                    </li>\n                    <li>\n                        {\n                            this.state.favorited === (true) ?\n                                <ActionButton\n                                    data-automation-id=\"test\"\n                                    iconProps={{ iconName: 'favoriteFill', className: 'post-toolbar-icon' }}\n                                    allowDisabledFocus={true}\n                                    disabled={false}\n                                    checked={false}\n                                    onClick={() => this.toggle_favorite()}\n                                    className='post-toolbar-icon'\n                                >\n                                    <span className=\"d-none d-md-block\">Unfavorite ({this.state.favorites})</span>\n                                </ActionButton>:\n                                <ActionButton\n                                    data-automation-id=\"test\"\n                                    iconProps={{ iconName: 'favorite', className: 'post-toolbar-icon' }}\n                                    allowDisabledFocus={true}\n                                    disabled={false}\n                                    checked={false}\n                                    onClick={() => this.toggle_favorite()}\n                                    className='post-toolbar-icon'\n                                >\n                                    <span className=\"d-none d-md-block\">Favorite ({this.state.favorites})</span>\n                                </ActionButton>\n                        }\n\n                    </li>\n                    <li>\n                        {\n                            this.state.boosted === (true) ?\n                                <ActionButton\n                                    data-automation-id=\"test\"\n                                    iconProps={{ iconName: 'boostFill', className: 'post-toolbar-icon' }}\n                                    allowDisabledFocus={true}\n                                    disabled={false}\n                                    checked={false}\n                                    onClick={() => this.toggle_boost()}\n                                    className='post-toolbar-icon'\n                                >\n                                    <span className=\"d-none d-md-block\">Unboost ({this.state.boosts})</span>\n                                </ActionButton>:\n                                <ActionButton\n                                    data-automation-id=\"test\"\n                                    iconProps={{ iconName: 'boost', className: 'post-toolbar-icon' }}\n                                    allowDisabledFocus={true}\n                                    disabled={false}\n                                    checked={false}\n                                    onClick={() => this.toggle_boost()}\n                                    className='post-toolbar-icon'\n                                >\n                                    <span className=\"d-none d-md-block\">Boost ({this.state.boosts})</span>\n                                </ActionButton>\n                        }\n\n                    </li>\n                    <li>\n                        {\n                            !this.state.noThread ? <ThreadPanel fromWhere={this.props.status.id} client={this.client} fullButton={true}/>: <span/>\n                        }\n\n                    </li>\n                    <li>\n                        {\n                            this.state.url ?\n                                <ActionButton\n                                    data-automation-id=\"test\"\n                                    iconProps={{ iconName: 'linkApp', className: 'post-toolbar-icon' }}\n                                    allowDisabledFocus={true}\n                                    disabled={false}\n                                    checked={false}\n                                    onClick={() => this.getLinkAndCopy(this.state.url)}\n                                    className='post-toolbar-icon'\n                                >\n                                    <span className=\"d-none d-md-block\">Copy link</span>\n                                </ActionButton>:\n                                <TooltipHost content={this.checkIfUnlisted()}>\n                                    <ActionButton\n                                        data-automation-id=\"test\"\n                                        iconProps={{ iconName: 'unlinkApp', className: 'post-toolbar-icon' }}\n                                        allowDisabledFocus={true}\n                                        disabled={false}\n                                        checked={false}\n                                        className='post-toolbar-icon'\n                                    >\n                                        <span className=\"d-none d-md-block\">Copy link</span>\n                                    </ActionButton>\n                                </TooltipHost>\n\n                        }\n                    </li>\n                    <li>\n                        {\n                            (this.props.status.account.acct === JSON.parse(localStorage.getItem('account') || \"\").acct) && (!this.props.status.reblog) ?\n                            <ActionButton\n                                iconProps={{iconName: 'deletePost', className: 'post-toolbar-icon'}}\n                                checked={false}\n                                onClick={() => this.openDeleteDialog()}\n                            >Delete</ActionButton>:\n                            <span/>\n                        }\n                    </li>\n                </ul>\n                <Dialog\n                    hidden={this.state.hideDeleteDialog}\n                    onDismiss={() => this.closeDeleteDialog()}\n                    dialogContentProps={{\n                        type: DialogType.normal,\n                        title: 'Delete this post?',\n                        subText: \"Are you sure you want to delete this? You can't undo this action.\"\n                    }}\n                    modalProps={{\n                        isBlocking: true,\n                        containerClassName: 'ms-dialogMainOverride',\n                        className: getDarkMode()\n                    }}\n                    >\n                    <DialogFooter>\n                        <PrimaryButton onClick={() => this.deletePost()} text=\"Delete\" />\n                        <DefaultButton onClick={() => this.closeDeleteDialog()} text=\"Cancel\" />\n                    </DialogFooter>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default PostToolbar;","/**\n * Changes anchor tags by transferring href properties to onClick.\n * Used to determine whether a link should be opened via Electron's shell\n * or by the standard window functionality.\n */\nexport function anchorInBrowser() {\n    const links = document.querySelectorAll('a[href]');\n\n    Array.prototype.forEach.call(links, (link: HTMLAnchorElement) => {\n        const url = link.getAttribute('href') || \"\";\n        if (url.indexOf('http') === 0) {\n            link.setAttribute(\"onclick\", \"openInBrowser(\\\"\" + link.href + \"\\\");\");\n            link.removeAttribute(\"href\");\n            link.classList.add(\"clickable-link\");\n        }\n    });\n}","import React, {Component} from 'react';\nimport {CompoundButton, Dialog, DialogType} from \"office-ui-fabric-react\";\nimport {ColorClassNames} from '@uifabric/styling';\nimport {anchorInBrowser} from \"../../utilities/anchorInBrowser\";\nimport {getDarkMode} from \"../../utilities/getDarkMode\";\nimport { Status } from 'megalodon';\n\ninterface IPostSensitiveProps {\n    status: any;\n}\n\ninterface IPostSensitiveState {\n    modal: boolean | null;\n    status: Status;\n}\n\n\n/**\n * A button that links to a post's content that may contain sensitive\n * content.\n * \n * @param status The status to ineract with and hide behind a dialog\n */\nclass PostSensitive extends Component<IPostSensitiveProps, IPostSensitiveState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            modal: false,\n            status: this.props.status\n        };\n\n        this.toggle = this.toggle.bind(this);\n    }\n\n    componentDidMount() {\n        anchorInBrowser();\n    }\n\n    toggle() {\n        this.setState({\n            modal: !this.state.modal\n        });\n\n    }\n\n    getAdditionalInformation(spoiler: string) {\n        if (spoiler.includes('NSFW: ')) {\n            return 'Careful! This content isn\\'t safe for work.';\n        } else if (spoiler.includes('Spoiler: ')) {\n            return 'If you haven\\'t experienced the topic beforehand, you shouldn\\'t view this.';\n        } else {\n            return 'Proceed with caution.';\n        }\n    }\n\n    flagColorOfButton(spoiler: string) {\n        if (spoiler.includes('NSFW: ')) {\n            return [ColorClassNames.redDarkBackground, ColorClassNames.redDarkBackgroundHover, ColorClassNames.white, ColorClassNames.whiteHover].toString();\n        } else if (spoiler.includes('Spoiler: ')) {\n            return [ColorClassNames.yellowBackground, ColorClassNames.yellowBackgroundHover].toString();\n        } else {\n            return \"\";\n        }\n    }\n\n    primaryOrNot(spoiler: string) {\n        if (spoiler.includes('NSFW: ')) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    render() {\n        let status = this.state.status;\n        return (\n            <div className=\"mt-2\" key={this.state.status.id.toString() + \"_sensitive_inner\"}>\n                <CompoundButton\n                    primary={this.primaryOrNot(status.spoiler_text)}\n                    secondaryText={this.getAdditionalInformation(status.spoiler_text)}\n                    onClick={this.toggle}\n                    text={status.spoiler_text || \"Content warning\"}\n                    className={this.flagColorOfButton(status.spoiler_text)}\n                >\n\n                </CompoundButton>\n                <Dialog\n                    hidden={!this.state.modal}\n                    onDismiss={this.toggle}\n                    modalProps={{\n                        className: getDarkMode()\n                    }}\n                    dialogContentProps={{\n                        type: DialogType.normal,\n                        title: status.spoiler_text,\n                        subText:\n                            <div>\n                                <div dangerouslySetInnerHTML={{__html: status.content}}/>\n                                {\n                                    status.media_attachments.length ?\n                                        <div className = \"row\">\n                                            {\n                                                status.media_attachments.map( function(media: any) {\n                                                    return(\n                                                        <div className=\"col\" key={status.id.toString() + \"_media_\" + media.id.toString()}>\n                                                            <img src={media.url} className = \"shadow-sm rounded\" alt={media.description} style = {{ width: '100%' }}/>\n                                                        </div>\n                                                    );\n                                                })\n                                            }\n                                            <br/>\n                                        </div>:\n                                        <span/>\n                                }\n                            </div> as unknown as string\n                    }}\n                    minWidth={600}\n                >\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default PostSensitive;","import {getInitials} from '@uifabric/utilities/lib/initials.js';\n\n/**\n * Forcibly get initials for a given name, even if they do not contain\n * Latin characters.\n * \n * @param name The name to search initials for.\n * @returns A string containing the initials for the given name or 'MU'\n */\nexport function getTrueInitials(name: string) {\n    try {\n        return getInitials(name, false);\n    } catch (err) {\n        console.warn(`Characters in ${name} may not be Latin! Defaulting to 'MU'.`);\n        return 'MU';\n    }\n}","import React, {Component} from 'react';\nimport { Panel, PanelType, Link, Persona, PersonaSize, PrimaryButton, DetailsList, DetailsListLayoutMode,\n    SelectionMode } from 'office-ui-fabric-react';\nimport Post from '../Post';\nimport {anchorInBrowser} from \"../../utilities/anchorInBrowser\";\nimport { getTrueInitials } from \"../../utilities/getTrueInitials\";\nimport {getDarkMode} from \"../../utilities/getDarkMode\";\nimport Mastodon, { Status } from 'megalodon';\n\ninterface IProfilePanelProps {\n    client: Mastodon;\n    account: any;\n}\n\ninterface IProfilePanelState {\n    account: any;\n    account_statuses: [];\n    following: boolean | undefined;\n    openPanel: boolean;\n}\n\n/**\n * A panel that display profile information of a given user.\n * \n * @param client The client used to get and post information with.\n * @param account The account to get information about.\n */\nclass ProfilePanel extends Component<IProfilePanelProps, IProfilePanelState> {\n\n    client: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.client = this.props.client;\n\n        this.state = {\n            account: this.props.account,\n            account_statuses: [],\n            following: false,\n            openPanel: false\n        }\n\n    }\n\n    componentDidMount() {\n        anchorInBrowser();\n    }\n\n    toggleProfilePanel() {\n        this.setState({\n            openPanel: !this.state.openPanel\n        });\n        this.getAllRecentStatuses();\n        this.getFollowStatus();\n    }\n\n    closeProfilePanel() {\n        this.setState({\n           openPanel: false,\n            account_statuses: []\n        });\n    }\n\n    createProfileLinkByName() {\n        return (\n            <span>\n                <Link onClick={() => this.toggleProfilePanel()} style={{\n                    fontWeight: 'bold'\n                }}>{this.checkDisplayName(this.state.account)}</Link>\n            </span>\n        );\n    }\n\n    createProfileTable(account: any) {\n        let columns = [\n            {\n                key: 'key',\n                fieldName: 'key',\n                name: '',\n                minWidth: 1,\n                data: \"string\",\n                maxWidth: 76,\n                isPadded: true\n\n            },\n            {\n                key: 'value',\n                fieldName: 'value',\n                data: 'string',\n                name: '',\n                minWidth: 1,\n                maxWidth: 128,\n                isPadded: true\n            }];\n        let rows = [];\n        \n        for (let item in account.fields) {\n            let value = account.fields[item].value.replace(\"class=\\\"invisible\\\"\", '');\n            rows.push({'key': account.fields[item].name, 'value': <p dangerouslySetInnerHTML={{__html: value}}/>})\n        }\n\n        if (rows.length > 0) {\n            return (\n                <div id=\"profile-table\">\n                    <DetailsList\n                        columns={columns}\n                        items={rows}\n                        selectionMode={SelectionMode.none}\n                        layoutMode={DetailsListLayoutMode.justified}\n                        className={\"shadow-sm rounded\"}\n                    />\n                </div>\n            );\n        }\n        \n    }\n\n    checkDisplayName(account: any) {\n        if (account.display_name === \"\") {\n            return account.username;\n        } else {\n            return account.display_name;\n        }\n    }\n\n    getProfileMetadata(account: any) {\n        return account.followers_count.toString() + ' followers, ' + account.following_count.toString() + ' following, ' + account.statuses_count + ' posts';\n    }\n\n    createProfilePersona() {\n        return (\n            <div>\n                <Persona\n                    {...\n                        {\n                            imageUrl: this.state.account.avatar,\n                            imageInitials: getTrueInitials(this.state.account.display_name),\n                            text: this.checkDisplayName(this.state.account),\n                            secondaryText: '@' + this.state.account.username,\n                            tertiaryText: this.getProfileMetadata(this.state.account)\n                        }\n                    }\n                    size={PersonaSize.size72}\n                    styles={\n                        {\n                            primaryText: {\n                                color: 'white !important',\n                                fontWeight: 'bold',\n                                textShadow: '0px 0px 4px #333'\n                            },\n                            secondaryText: {\n                                color: 'white !important',\n                                fontWeight: 'bolder',\n                                textShadow: '0px 0px 2px #333'\n                            },\n                            tertiaryText: {\n                                color: '#f4f4f4 !important',\n                                fontWeight: 'bolder',\n                                textShadow: '0px 0px 2px #333'\n                            }\n                        }\n                    }\n                />\n                <PrimaryButton\n                    text={this.returnFollowStatusText()}\n                    onClick = {() => this.toggleFollow()}\n                    className={\"mt-4 shadow-sm \" + getDarkMode()}\n                    disabled={this.checkFollowNotSelf()}\n                    aria-describedby=\"cannotFollow\"\n                />\n            </div>\n        );\n    }\n\n    getFollowStatus() {\n        let _this = this;\n        this.client.get('/accounts/relationships', {id: this.state.account.id})\n            .then(\n                (resp: any) => {\n                    _this.setState({\n                        following: resp.data[0].following\n                    })\n                }\n            );\n    }\n\n    checkFollowNotSelf() {\n        return this.state.account.id === JSON.parse(localStorage.getItem('account') || \"\").id;\n    }\n\n    returnFollowStatusText() {\n        if (this.checkFollowNotSelf()) {\n            return 'Can\\'t follow self';\n        }\n         else {\n             if (this.state.following) {\n                return 'Unfollow';\n            } else {\n                return 'Follow';\n            }\n        }\n    }\n\n    toggleFollow() {\n        let _this = this;\n        if (this.state.following) {\n            this.client.post('/accounts/' + this.state.account.id.toString() + '/unfollow')\n                .then((resp: any) => {\n                    _this.setState({\n                        following: false\n                    });\n                })\n        } else {\n            this.client.post('/accounts/' + this.state.account.id.toString() + '/follow')\n                .then((resp: any) => {\n                    _this.setState({\n                        following: true\n                    });\n                })\n        }\n    }\n\n    getAllRecentStatuses() {\n        let _this = this;\n        this.client.get('/accounts/' + this.state.account.id + '/statuses', {limit: 150})\n            .then((resp: any) => {\n                _this.setState({\n                    account_statuses: resp.data\n                });\n            });\n    }\n\n    showRecentStatuses() {\n        let key = 0;\n        if (this.state.account_statuses.length > 0) {\n            return (\n                <div className=\"my-2\">\n                    {\n                        this.state.account_statuses.map((post: Status) => {\n                            return(\n                                <div className=\"my-2\" key={this.props.account.id.toString() + \"_post_\" + post.id.toString()}>\n                                    <Post key={key++} client={this.client} status={post} nolink={true} clickToThread={true}/>\n                                </div>);\n                        })\n                    }\n                </div>\n            );\n        } else {\n            return <p className=\"my-2\">No posts found.</p>;\n        }\n    }\n\n    getStyles() {\n        return {\n            closeButton: {\n                color: 'transparent',\n                \"&:hover\": {\n                    color: 'transparent !important'\n                },\n                \"&:active\": {\n                    color: 'transparent !important'\n                },\n                backgroundImage: 'url(\\'close.svg\\')',\n                backgroundPosition: 'center',\n                backgroundRepeat: 'no-repeat',\n                backgroundSize: '50%'\n            },\n            content: {\n                marginTop: 0\n            },\n            header: {\n                backgroundColor: 'black',\n                backgroundImage: 'url(' + this.state.account.header + ')',\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                backgroundRepeat: 'none',\n                marginTop: '0 !important',\n                height: 200,\n                paddingLeft: '0 !important',\n                paddingRight: '0 !important',\n                boxShadow: '0px 0px 4px #333'\n            },\n            headerText: {\n                color: 'white',\n                backgroundColor: 'rgba(0, 0, 0, 0.2)',\n                height: 200,\n                margin: 0,\n                verticalAlign: 'middle',\n                paddingTop: 48,\n                paddingLeft: 20,\n                paddingRight: 20,\n                filter: 'blur(0px)'\n            }\n        };\n    }\n\n    render() {\n        return(<span>\n            {this.createProfileLinkByName()}\n            <Panel\n                isOpen={this.state.openPanel}\n                type={PanelType.medium}\n                onDismiss={() => this.closeProfilePanel()}\n                closeButtonAriaLabel=\"Close\"\n                styles={this.getStyles()}\n                headerText={this.createProfilePersona() as unknown as string}\n                isLightDismiss={true}\n                className={getDarkMode()}\n            >\n                <div className=\"mt-4\">\n                        <div\n                            dangerouslySetInnerHTML={{__html: this.state.account.note}}\n                            className=\"mt-2\"\n                        />\n                        {this.createProfileTable(this.state.account)}\n                </div>\n                <hr/>\n                <div className=\"my-2\">\n                    {this.showRecentStatuses()}\n                </div>\n            </Panel>\n        </span>);\n    }\n\n}\n\nexport default ProfilePanel;","import React, {Component} from 'react';\nimport {\n    DocumentCard,\n    DocumentCardTitle,\n    DocumentCardActivity,\n    DocumentCardType,\n    DocumentCardDetails,\n    PositioningContainer\n} from 'office-ui-fabric-react';\nimport moment from 'moment';\nimport ThreadPanel from '../ThreadPanel';\nimport ProfilePanel from '../ProfilePanel';\nimport {getTrueInitials} from '../../utilities/getTrueInitials';\nimport Mastodon, { Status } from 'megalodon';\n\ninterface IBoostCardProps {\n    client: Mastodon;\n    status: Status;\n}\n\ninterface IBoostCardState {\n    status: Status;\n}\n\n/**\n * Small card element that displays a status. Usually used to display a reblogged\n * status.\n * \n * @param client The Mastodon client used to view information about the status\n * @param status The status to display within the card itself\n */\nclass BoostCard extends Component<IBoostCardProps, IBoostCardState> {\n    client: any;\n    threadRef: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.client = this.props.client;\n        this.threadRef = React.createRef();\n\n        this.state = {\n            status: this.props.status\n        }\n    }\n\n    stripElementsFromContent(content: string) {\n        let temporaryDiv = document.createElement(\"div\");\n        temporaryDiv.innerHTML = content;\n        return temporaryDiv.textContent || temporaryDiv.innerText || \"\";\n    }\n\n    getCardStyles(status: Status) {\n        let documentCardStyles = {};\n\n            let actualContent = this.stripElementsFromContent(status.content);\n\n            if (status.media_attachments.length !== 0) {\n\n                documentCardStyles = {\n                    root: {\n                        height: 355\n                    }\n                }\n\n            } else if (actualContent.length > 150) {\n                documentCardStyles = {\n                    root: {\n                        height: 200\n                    }\n                }\n            }\n\n            return documentCardStyles;\n    }\n\n    openChildThreadPanel() {\n        this.threadRef.current.openThreadPanel();\n    }\n\n    render() {\n        let post = this.state.status;\n        return(\n            <div id=\"boost-card\">\n                <ThreadPanel \n                    fromWhere={post.id} \n                    client={this.client} \n                    fullButton={null}\n                    ref={this.threadRef}\n                />\n                <DocumentCard\n                    type={DocumentCardType.compact}\n                    styles={this.getCardStyles(post)}\n                    onClick={() => this.openChildThreadPanel()}\n                >\n                    <DocumentCardDetails>\n                        <DocumentCardTitle\n                            title={\n                                <div>\n                                    <p>{this.stripElementsFromContent(post.content)}</p>\n                                    {\n                                        post.media_attachments.length ?\n                                            <div className = \"row\">\n                                                {\n                                                    post.media_attachments.map( function(media: any) {\n                                                        return(\n                                                            <div className=\"col\" key={'media' + media.id}>\n                                                                {\n                                                                    (media.type === \"image\") ?\n                                                                        <img src={media.url} className = \"shadow-sm rounded\" alt={media.description} style = {{ width: '100%' }}/>:\n                                                                        <video src={media.url} autoPlay={false} controls={true} className = \"shadow-sm rounded\" style = {{ width: '100%' }}/>\n                                                                }\n                                                            </div>\n                                                        );\n                                                    })\n                                                }\n                                            </div>:\n                                            <span/>\n                                    }\n                                </div> as unknown as string\n                            }\n                            shouldTruncate={true}\n                            showAsSecondaryTitle={true}\n                            styles={this.getCardStyles(post)}\n                        />\n                        <DocumentCardActivity\n                            activity={\"Originally posted on \" + moment(post.created_at).format(\"MMM Do, YYYY: h:mm A\")}\n                            people={[{ name: <ProfilePanel account={post.account} client={this.client}/> as unknown as string, profileImageSrc: post.account.avatar, initials:getTrueInitials(post.account.display_name)}]}\n                        />\n                    </DocumentCardDetails>\n                </DocumentCard>\n            </div>\n        );\n    }\n}\n\nexport default BoostCard;","import React, { Component } from 'react';\nimport { Persona, TooltipHost } from \"office-ui-fabric-react\";\nimport moment from 'moment';\nimport PostContent from './PostContent';\nimport PostDate from './PostDate';\nimport PostToolbar from './PostToolbar';\nimport PostSensitive from './PostSensitive';\nimport ProfilePanel from '../ProfilePanel';\nimport BoostCard from './BoostCard';\nimport { getInitials } from '@uifabric/utilities/lib/initials.js';\nimport {anchorInBrowser} from \"../../utilities/anchorInBrowser\";\nimport { getTrueInitials } from \"../../utilities/getTrueInitials\";\nimport Mastodon, { Status } from 'megalodon';\nimport ThreadPanel from '../ThreadPanel';\n\ninterface IPostProps {\n    client: Mastodon;\n    nolink?: boolean | undefined;\n    nothread?: boolean | undefined;\n    bigShadow?: boolean | undefined;\n    status: any;\n    clickToThread?: boolean;\n}\n\ninterface IPostState {\n    noLink: boolean | undefined;\n    noThread: boolean | undefined;\n    clickToThread?: boolean;\n}\n\n/**\n * Basic element for rendering a post on Mastodon\n * \n * @param client The client used to get/post information from Mastodon\n * @param status The post to display and interact with\n * @param nolink Whether the post shouldn't link the author's profile panel\n * @param nothread Whether the post shouldn't include the 'Show thread' button\n */\nclass Post extends Component<IPostProps, IPostState> {\n    client: any;\n    threadRef: any;\n\n    constructor(props: any) {\n        super(props);\n        this.client = this.props.client;\n\n        this.threadRef = React.createRef();\n\n        this.state = {\n            noLink: this.props.nolink,\n            noThread: this.props.nothread,\n            clickToThread: this.props.clickToThread || false\n        }\n\n    }\n\n    componentDidMount() {\n        anchorInBrowser();\n    }\n\n    getBigShadow() {\n        if (this.props.bigShadow) {\n            return 'shadow'\n        } else {\n            return 'shadow-sm'\n        }\n    }\n\n    getAuthorName(account: any) {\n        let x;\n        try {\n            x = account.display_name;\n            if (x === '') {\n                x = account.acct;\n            }\n            getInitials(x, false);\n        } catch (error) {\n            x = account.acct;\n        }\n        return x\n    }\n\n    getApplicationName(status: any) {\n        if (status.application === null || status.application === undefined) {\n            return (\n                <TooltipHost content=\"We couldn't identify the application used to post this status.\">\n                    <span><b>determination (Web)</b></span>\n                </TooltipHost>\n            );\n        } else {\n            return <span><b>{status.application.name}</b></span>;\n        }\n    }\n\n    getVisibility(status: Status) {\n        if (status.visibility === 'public') {\n            return 'Public';\n        } else if (status.visibility === 'unlisted') {\n            return 'Unlisted';\n        } else if (status.visibility === 'private') {\n            return 'Followers only';\n        } else {\n            return 'Direct message';\n        }\n    }\n\n    getPersonaText(index: any) {\n        if (this.state.noLink) {\n            return <b>{this.getAuthorName(this.props.status.account)}</b>;\n        } else {\n            return <ProfilePanel account={this.props.status.account} client={this.client} key={this.props.status.account.id.toString() + \"_\" + index.toString() + \"_panel\"}/>;\n        }\n    }\n\n    correctPostLinks(content: any) {\n        let temporaryDiv = document.createElement(\"div\");\n        temporaryDiv.innerHTML = content;\n\n        let allAnchorTags = temporaryDiv.getElementsByTagName(\"a\");\n\n        for (let i=0; i < allAnchorTags.length; i++) {\n            allAnchorTags[i].setAttribute(\"onclick\", \"openInBrowser(\\\"\" + allAnchorTags[i].href + \"\\\");\")\n\n        }\n\n        return temporaryDiv.innerHTML;\n    }\n\n    openThreadPanel(event: any) {\n        let parent = event.target.parentNode;\n        if (\n            event.target && parent &&\n            !event.target.className.includes(\"ms-Link\") && \n            !event.target.className.includes(\"ms-Button\") &&\n            !parent.className.includes(\"ms-Button-flexContainer\") &&\n            !this.props.status.reblog &&\n            !(event.target.nodeName === \"A\" || parent.nodeName === \"A\")\n            ) {\n            this.threadRef.current.openThreadPanel();\n        }\n    }\n\n    getBoostCard(status: Status) {\n        if (status.reblog) {\n            return (\n                <div className='mt-1 ml-4 mb-1'>\n                    <div key={status.id.toString() + \"_boost\"}>\n                        { status.sensitive === true ?\n                            <PostSensitive status={this.props.status} key={status.id.toString() + \"_sensitive_boost\"}/>:\n\n                            <div className='ml-4 mb-2'>\n                                <BoostCard client={this.client} status={this.props.status.reblog as Status}/>\n                            </div>\n                        }\n                    </div>\n                </div>\n            );\n        }\n    }\n\n    render() {\n        return (\n        <div \n            id=\"post\" \n            key={this.props.status.id + \"_post\"} \n            className={\"container rounded p-3 ms-slideDownIn10 marked-area \" + this.getBigShadow()}\n            onClick={(e) => {\n                if (this.state.clickToThread) {\n                    this.openThreadPanel(e);\n                }\n            }}\n        >\n                {\n                        <Persona {... {\n                            imageUrl: this.props.status.account.avatar_static,\n                            text: this.getPersonaText(this.props.status.id) as unknown as string,\n                            imageInitials: getTrueInitials(this.props.status.account.display_name),\n                            secondaryText: '@' + this.props.status.account.acct\n                        } } />\n                }\n                <PostContent>\n                    {\n\n                        this.props.status.reblog ?\n                            this.getBoostCard(this.props.status):\n\n                            <div className='mb-2' key={this.props.status.id.toString() + \"_contents\"}>\n                                { this.props.status.sensitive === true ?\n                                    <PostSensitive status={this.props.status} key={this.props.status.id.toString() + \"_sensitive\"}/>:\n                                    <div>\n                                        <p dangerouslySetInnerHTML={{__html: this.props.status.content}} />\n                                        {\n                                            this.props.status.media_attachments.length ?\n                                                <div className = \"row\">\n                                                    {\n                                                        this.props.status.media_attachments.map( function(media: any) {\n                                                            return(\n                                                                <div key={'media' + media.id} className=\"col\">\n                                                                    {\n                                                                        (media.type === \"image\") ?\n                                                                            <img src={media.url} className = \"shadow-sm rounded\" alt={media.description} style = {{ width: '100%' }}/>:\n                                                                            <video src={media.url} autoPlay={false} controls={true} className = \"shadow-sm rounded\" style = {{ width: '100%' }}/>\n                                                                    }\n                                                                </div>\n                                                            );\n                                                        })\n                                                    }\n                                                </div>:\n                                                <span/>\n                                        }\n                                    </div>}\n                            </div>\n                    }\n\n                </PostContent>\n                <PostToolbar\n                    client={this.props.client}\n                    status={this.props.status}\n                    nothread={this.props.nothread}\n                />\n                <PostDate date={<span>{moment(this.props.status.created_at).format('MM/DD/YYYY [at] h:mm A')} via {this.getApplicationName(this.props.status)} ({this.getVisibility(this.props.status)})</span> as unknown as string}/>\n                <ThreadPanel\n                    fromWhere={this.props.status.id}\n                    client={this.client}\n                    fullButton={null}\n                    ref={this.threadRef}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Post;","import Mastodon, {Status, Response} from \"megalodon\";\nimport React, {Component} from 'react';\nimport Post from './index';\n\n\ninterface IPostRollProps {\n    timeline?: string;\n    client: Mastodon;\n}\n\ninterface IPostRollState {\n    statuses: Array<any>;\n    statusCount: Number;\n}\n\n/**\n * A timeline or list of posts from a given timeline\n * @param client The client used to get/post information from Mastodon\n * @param timeline The timeline to receive information from. Valid values include: (direct | home | local | public)\n */\nclass PostRoll extends Component<IPostRollProps, IPostRollState> {\n    client: Mastodon;\n    streamListener: any;\n    constructor(props: any) {\n        super(props);\n        this.client = props.client;\n        this.state = {\n            statuses: [],\n            statusCount: 150\n        }\n    }\n\n    componentDidMount() {\n        let _this = this;\n        let count = parseInt(String(this.state.statusCount));\n\n        if (this.props.timeline === \"home\") {\n            this.streamListener = this.client.stream('/streaming/user');\n\n            this.streamListener.on('connect', () => {\n                this.client.get('/timelines/home', {\"limit\": _this.state.statusCount, 'local': true})\n                    .then((resp: any) => {\n                        _this.setState({\n                            statuses: resp.data,\n                            statusCount: count ++\n                        } as unknown as IPostRollState)\n                    });\n            });\n\n        } else if (this.props.timeline === \"local\") {\n            this.streamListener = this.client.stream('/streaming/public/local');\n\n            this.streamListener.on('connect', () => {\n                this.client.get('/timelines/public', {\"limit\": _this.state.statusCount, 'local': true})\n                    .then((resp) => {\n                        _this.setState({\n                            statuses: resp.data,\n                            statusCount: count ++\n                        } as unknown as IPostRollState)\n                    });\n            });\n\n        } else if (this.props.timeline === \"public\") {\n            this.streamListener = this.client.stream('/streaming/public');\n\n            this.streamListener.on('connect', () => {\n                this.client.get('/timelines/public', {\"limit\": _this.state.statusCount, 'local': false})\n                    .then((resp) => {\n                        _this.setState({\n                            statuses: resp.data,\n                            statusCount: count ++\n                        } as unknown as IPostRollState)\n                    });\n            });\n\n        } else if (this.props.timeline === \"messages\") {\n            this.streamListener = this.client.stream('/streaming/direct');\n\n            this.streamListener.on('connect', () => {\n                this.client.get('/conversations', {\"limit\": _this.state.statusCount, 'local': false})\n                    .then((resp) => {\n                        let data:any = resp.data;\n                        let messages = [];\n                        for (let i in data) {\n                            messages.push(data[i].last_status);\n                        }\n\n                        _this.setState({\n                            statuses: messages,\n                            statusCount: messages.length\n                        } as unknown as IPostRollState);\n                    });\n            });\n        }\n\n        this.streamListener.on('update', (status: Status) => {\n            let old_statuses = _this.state.statuses;\n            old_statuses.unshift(status as never);\n            _this.setState({\n                statuses: old_statuses\n            });\n            this.forceUpdate()\n        });\n\n        this.streamListener.on('message', (msg:any) => {\n            console.log(msg);\n        });\n\n        this.streamListener.on('connection-limit-exceeded', (err: Error) => {\n            console.error(err)\n        });\n\n        this.streamListener.on('not-event-stream', (mes: any) => {\n            console.log(mes)\n        })\n\n        this.streamListener.on('delete', (delId: Number) => {\n            let roll = _this.state.statuses;\n            for (let i in roll) {\n                if (roll[Number(i)].id === delId) {\n                    roll.splice(Number(i), 1);\n                }\n            }\n            _this.setState({statuses: roll});\n            this.forceUpdate();\n        });\n    }\n\n    getClearTimelineText() {\n        let header = \"It's empty here...\";\n        let body = \"It looks like there aren't any posts on this timeline. Why not get it going with a new post?\";\n        if (this.props.timeline === \"messages\") {\n            header = \"All clear!\";\n            body = \"It looks like you have no new messages. Interact with some people to get the conversation going!\"\n        }\n        return (<div>\n            <h3>{header}</h3>\n            <p>{body}</p>\n            <small>\n                <p>If you think this is an error, try checking the following: </p>\n                <ul>\n                    <li>You have a stable internet connection.</li>\n                    <li>You have allowed Hyperspace access to your account.</li>\n                    <li>You aren't being throttled on your account (429).</li>\n                </ul>\n            </small>\n        </div>);\n    }\n\n    render() {\n        let _this = this;\n        return (\n            <div>\n                {this.state.statuses.length > 0 ? \n                <div>\n                    {this.state.statuses.map(function (status: Status) {\n                            return ( \n                                <div key={status.id} className=\"my-3\">\n                                    <Post client={_this.client} status={status} nolink={false} nothread={false} clickToThread={true}/>\n                                </div>\n                            );\n                        })}\n                    <hr/>\n                    <div id=\"end-of-post-roll\" className=\"my-4\" style={{textAlign: 'center'}}>It appears you've reached... an end.</div>\n                </div>:\n                    <div id=\"timeline-error\" className=\"row p-4\">\n                        <div className = \"row\">\n                            <div className = \"col\">\n                                {this.getClearTimelineText()}\n                            </div>\n                        </div>\n\n                    </div>}\n\n            </div>\n        );\n    }\n}\n\nexport default PostRoll;","import React, { Component } from 'react';\nimport {Pivot, PivotItem, PivotLinkSize, IPivotItemProps, Icon} from \"office-ui-fabric-react\";\nimport PostRoll from \"../Post/PostRoll\";\nimport Mastodon from 'megalodon';\n\ninterface ITimelineProps {\n    client: Mastodon;\n}\n\n/**\n * The main element for hosting timelines.\n * \n * @param client The client used to get/post information with\n */\nclass Timeline extends Component<ITimelineProps> {\n    client: any;\n\n    constructor(props: ITimelineProps) {\n        super(props);\n        this.client = this.props.client;\n    }\n\n    getTextForTab(what: string) {\n        let agent = navigator.userAgent;\n        if (/windows phone/i.test(agent) || /android/i.test(agent) || /iPad|iPhone|iPod/i.test(agent))\n            return ''\n        else\n            return what\n    }\n\n    render() {\n        return (\n            <div style={{ width: '100%'}}>\n                <Pivot linkSize={PivotLinkSize.large}>\n                    <PivotItem\n                        headerText={this.getTextForTab('Home')} \n                        itemIcon=\"homeApp\"\n                    >\n                        <div className = \"container mt-2 ml-0\">\n                            <PostRoll timeline=\"home\" client={this.client}/>\n                        </div>\n                    </PivotItem>\n                    <PivotItem headerText={this.getTextForTab('Local')} itemIcon=\"localCommunity\">\n                        <div className = \"container mt-2\">\n                            <PostRoll timeline=\"local\" client={this.client}/>\n                        </div>\n                    </PivotItem>\n                    <PivotItem headerText={this.getTextForTab('Public')} itemIcon=\"public\">\n                        <div className = \"container mt-2\">\n                            <PostRoll timeline=\"public\" client={this.client}/>\n                        </div>\n                    </PivotItem>\n                    <PivotItem headerText={this.getTextForTab('Messages')} itemIcon=\"directMessage\">\n                        <div className = \"container mt-2\">\n                            <PostRoll timeline=\"messages\" client={this.client}/>\n                        </div>\n                    </PivotItem>\n                </Pivot>\n            </div>\n        );\n    }\n}\n\nexport default Timeline;","import React, {Component} from 'react';\nimport { Panel, \n    PanelType, \n    Link, \n    Persona, \n    PersonaSize, \n    PrimaryButton, \n    DetailsList, \n    DetailsListLayoutMode,\n    SelectionMode, \n    DefaultButton,\n    Dialog,\n    DialogFooter,\n    DialogType,\n    TextField\n } from 'office-ui-fabric-react';\nimport Post from '../Post';\nimport {anchorInBrowser} from \"../../utilities/anchorInBrowser\";\nimport { getTrueInitials } from \"../../utilities/getTrueInitials\";\nimport {getDarkMode} from \"../../utilities/getDarkMode\";\nimport Mastodon, { Status } from 'megalodon';\nimport filedialog from 'file-dialog';\nimport { object } from 'prop-types';\n\ninterface IAccountPanelProps {\n    client: Mastodon;\n    account: any;\n}\n\ninterface IAccountPanelState {\n    account: any;\n    account_statuses: [];\n    openPanel: boolean;\n    openBioDialog: boolean;\n    openImageDialog: boolean;\n    bioText: string;\n    avatar: FormData | any;\n    avatarPreview: any[];\n    header: FormData | any;\n    headerPreview: any[];\n}\n\n/**\n * A panel that display profile information of the signed in user.\n * This is similar to ProfilePanel, but includes options that pertain\n * to the user specifically (edit bio, change images).\n * \n * @param client The client used to get and post information with.\n * @param account The account to get information about.\n */\nexport class AccountPanel extends Component<IAccountPanelProps, IAccountPanelState> {\n\n    client: Mastodon | any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.client = this.props.client;\n\n        this.state = {\n            account: this.props.account,\n            account_statuses: [],\n            openPanel: false,\n            openBioDialog: false,\n            openImageDialog: false,\n            bioText: this.props.account.source.note,\n            avatar: '',\n            avatarPreview: [''],\n            header: '',\n            headerPreview: ['']\n        }\n\n    }\n\n    componentDidMount() {\n        anchorInBrowser();\n    }\n\n    toggleProfilePanel() {\n        this.setState({\n            openPanel: !this.state.openPanel\n        });\n        this.getAllRecentStatuses();\n    }\n\n    closeProfilePanel() {\n        this.setState({\n           openPanel: false,\n            account_statuses: []\n        });\n    }\n\n    toggleBioDialog() {\n        this.setState({\n            openBioDialog: !this.state.openBioDialog\n        });\n    }\n\n    toggleImageDialog() {\n        this.setState({\n            openImageDialog: !this.state.openImageDialog\n        })\n    }\n\n    cancelImageDialog() {\n        this.setState({\n            avatar: '',\n            header: '',\n            avatarPreview: [''],\n            headerPreview: [''],\n            openImageDialog: false\n        })\n    }\n\n    createProfileLinkByName() {\n        return (\n            <span>\n                <Link onClick={() => this.toggleProfilePanel()} style={{\n                    fontWeight: 'bold'\n                }}>{this.checkDisplayName(this.state.account)}</Link>\n            </span>\n        );\n    }\n\n    createProfileTable(account: any) {\n        let columns = [\n            {\n                key: 'key',\n                fieldName: 'key',\n                name: '',\n                minWidth: 1,\n                data: \"string\",\n                maxWidth: 76,\n                isPadded: true\n\n            },\n            {\n                key: 'value',\n                fieldName: 'value',\n                data: 'string',\n                name: '',\n                minWidth: 1,\n                maxWidth: 128,\n                isPadded: true\n            }];\n        let rows = [];\n        \n        for (let item in account.fields) {\n            let value = account.fields[item].value.replace(\"class=\\\"invisible\\\"\", '');\n            rows.push({'key': account.fields[item].name, 'value': <p dangerouslySetInnerHTML={{__html: value}}/>})\n        }\n\n        if (rows.length > 0) {\n            return (\n                <div id=\"profile-table\">\n                    <DetailsList\n                        columns={columns}\n                        items={rows}\n                        selectionMode={SelectionMode.none}\n                        layoutMode={DetailsListLayoutMode.justified}\n                        className={\"shadow-sm rounded\"}\n                    />\n                </div>\n            );\n        }\n        \n    }\n\n    checkDisplayName(account: any) {\n        if (account.display_name === \"\") {\n            return account.username;\n        } else {\n            return account.display_name;\n        }\n    }\n\n    getProfileMetadata(account: any) {\n        return account.followers_count.toString() + ' followers, ' + account.following_count.toString() + ' following, ' + account.statuses_count + ' posts';\n    }\n\n    createProfilePersona() {\n        return (\n            <div>\n                <Persona\n                    {...\n                        {\n                            imageUrl: this.state.account.avatar,\n                            imageInitials: getTrueInitials(this.state.account.display_name),\n                            text: this.checkDisplayName(this.state.account) + \" (you)\",\n                            title: 'Despite everything, it\\'s still you.',\n                            secondaryText: '@' + this.state.account.username,\n                            tertiaryText: this.getProfileMetadata(this.state.account)\n                        }\n                    }\n                    size={PersonaSize.size72}\n                    styles={\n                        {\n                            primaryText: {\n                                color: 'white !important',\n                                fontWeight: 'bold',\n                                textShadow: '0px 0px 4px #333'\n                            },\n                            secondaryText: {\n                                color: 'white !important',\n                                fontWeight: 'bolder',\n                                textShadow: '0px 0px 2px #333'\n                            },\n                            tertiaryText: {\n                                color: '#f4f4f4 !important',\n                                fontWeight: 'bolder',\n                                textShadow: '0px 0px 2px #333'\n                            }\n                        }\n                    }\n                />\n                <div className=\"mt-4\">\n                    <PrimaryButton text=\"Edit bio\" style={{marginRight: 8}} onClick={() => this.toggleBioDialog()}/>\n                    <DefaultButton text=\"Change images\" onClick={() => this.toggleImageDialog()}/>\n                    {this.getEditBioDialog()}\n                    {this.getChangeImagesDialog()}\n                </div>\n            </div>\n        );\n    }\n\n    getAllRecentStatuses() {\n        let _this = this;\n        this.client.get('/accounts/' + this.state.account.id + '/statuses', {limit: 150})\n            .then((resp: any) => {\n                _this.setState({\n                    account_statuses: resp.data\n                });\n            });\n    }\n\n    showRecentStatuses() {\n        let key = 0;\n        if (this.state.account_statuses.length > 0) {\n            return (\n                <div className=\"my-2\">\n                    {\n                        this.state.account_statuses.map((post: Status) => {\n                            return(\n                                <div className=\"my-2\" key={this.props.account.id.toString() + \"_post_\" + post.id.toString()}>\n                                    <Post key={key++} client={this.client} status={post} nolink={true} clickToThread={true}/>\n                                </div>);\n                        })\n                    }\n                </div>\n            );\n        } else {\n            return <p className=\"my-2\">No posts found.</p>;\n        }\n    }\n\n    getEditBioDialog() {\n        return (\n            <Dialog\n                isOpen={this.state.openBioDialog}\n                onDismiss={() => this.toggleBioDialog}\n                dialogContentProps={{\n                    type: DialogType.largeHeader,\n                    title: 'Edit your bio',\n                    subText: 'Change what your bio says or type in a new bio here.'\n                }}\n                modalProps={{\n                    isBlocking: false,\n                    containerClassName: 'ms-dialogMainOverride',\n                    className: getDarkMode()\n                }}\n                minWidth={500}\n            >\n                <TextField\n                    multiline={true}\n                    rows={5}\n                    resizable={false}\n                    maxLength={500}\n                    onBlur={(e: any) => this.updateBioText(e)}\n                    placeholder=\"Who are you?\"\n                    data-emojiable={false}\n                    defaultValue={this.state.bioText}\n\n                />\n                <DialogFooter>\n                    <PrimaryButton text=\"Save\" onClick={() => this.publishBio()}/>\n                    <DefaultButton text=\"Cancel\" onClick={() => this.toggleBioDialog()}/>\n                </DialogFooter>\n            </Dialog>\n        );\n        \n    }\n\n    updateBioText(e: any) {\n        this.setState({\n            bioText: e.target.value as string\n        });\n    }\n\n    publishBio() {\n        let _this = this;\n        this.client.patch('/accounts/update_credentials', {\n            note: this.state.bioText\n        })\n            .then((acct: any) => {\n                localStorage.setItem('account', JSON.stringify(acct.data));\n                this.setState({\n                    account: acct.data,\n                    bioText: acct.data.source.note,\n                    openBioDialog: false\n                })\n            });\n    }\n\n    getChangeImagesDialog() {\n        return(\n            <Dialog\n                isOpen={this.state.openImageDialog}\n                onDismiss={() => this.toggleImageDialog}\n                dialogContentProps={{\n                    type: DialogType.largeHeader,\n                    title: 'Change your images',\n                    subText: 'You can change your avatar, header image, or both by clicking on the respective image.'\n                }}\n                modalProps={{\n                    isBlocking: false,\n                    containerClassName: 'ms-dialogMainOverride',\n                    className: getDarkMode()\n                }}\n                minWidth={700}\n            >\n                <div className=\"row p-4\" style={\n                        {\n                            backgroundImage: \"url('\" + this.getBackgroundUrl() + \"')\",\n                            backgroundPosition: 'center',\n                            backgroundSize: 'cover',\n                            backgroundRepeat: 'no-repeat',\n                            textAlign: \"center\"\n                        }\n                    }\n                    onClick={(event: any) => {\n                        if (!(event.target.nodeName === \"IMG\")) {\n                            this.uploadImage('header')\n                        }\n                    }}\n                >\n                    <div className = \"mx-auto\">\n                        {\n                            this.state.avatar !== '' ? \n                                this.renderNewAvatar(): \n                                <img \n                                    src={this.props.account.avatar_static}\n                                    className=\"rounded-circle shadow-sm\"\n                                    style={{width: '50%'}}\n                                    onClick={() => this.uploadImage(\"avatar\")}\n                                />\n                        }\n                        \n                    </div>\n                </div>\n                <DialogFooter>\n                    <PrimaryButton text=\"Upload\" onClick={() => this.changeImages()}/>\n                    <DefaultButton text=\"Cancel\" onClick={() => this.cancelImageDialog()}/>\n                </DialogFooter>\n            </Dialog>\n        );\n    }\n\n    uploadImage(type: string) {\n        if (type !== \"avatar\" && type !== \"header\")\n            throw new Error(\"Expected 'avatar' or 'header' but got \" + type);\n        let _this = this;\n        filedialog({\n            multiple: false,\n            accept: 'image/*'\n        }).then((images: any) => {\n            let upload = new FormData();\n            upload.append(type, images[0]);\n\n            let previewArray: any[] = [];\n            previewArray.push(images[0]);\n\n            if (type == \"avatar\") {\n                _this.setState({\n                    avatar: upload,\n                    avatarPreview: previewArray\n                })\n            } else if (type === \"header\") {\n                _this.setState({\n                    header: upload,\n                    headerPreview: previewArray\n                })\n            }\n        })\n    }\n\n    changeImages() {\n        let _this = this;\n        this.client.patch('/accounts/update_credentials', this.state.avatar).then((acct: any) => {\n            this.setState({\n                account: acct.data,\n                avatar: ''\n            })\n        })\n        this.client.patch('/accounts/update_credentials', this.state.header).then((acct: any) => {\n            localStorage.setItem('account', JSON.stringify(acct.data));\n            this.setState({\n                account: acct.data,\n                header: '',\n                openImageDialog: false\n            })\n        })\n    }\n\n    renderNewAvatar() {\n        let url = window.URL.createObjectURL(this.state.avatarPreview[0] as File);\n        return (\n            <img\n                src={url}\n                onClick={() => this.uploadImage('avatar')}\n                className=\"rounded-circle shadow-sm\"\n                style={{width: '50%'}}\n            />\n        )\n    }\n\n    getBackgroundUrl() {\n        if (this.state.headerPreview[0] !== '') {\n            let url =  window.URL.createObjectURL(this.state.headerPreview[0]);\n            return url;\n        } else {\n            return this.props.account.header_static as string;\n        }\n    }\n\n    getStyles() {\n        return {\n            closeButton: {\n                color: 'transparent',\n                \"&:hover\": {\n                    color: 'transparent !important'\n                },\n                \"&:active\": {\n                    color: 'transparent !important'\n                },\n                backgroundImage: 'url(\\'close.svg\\')',\n                backgroundPosition: 'center',\n                backgroundRepeat: 'no-repeat',\n                backgroundSize: '50%'\n            },\n            content: {\n                marginTop: 0\n            },\n            header: {\n                backgroundColor: 'black',\n                backgroundImage: 'url(' + this.state.account.header + ')',\n                backgroundPosition: 'center',\n                backgroundSize: 'cover',\n                backgroundRepeat: 'none',\n                marginTop: '0 !important',\n                height: 200,\n                paddingLeft: '0 !important',\n                paddingRight: '0 !important',\n                boxShadow: '0px 0px 4px #333'\n            },\n            headerText: {\n                color: 'white',\n                backgroundColor: 'rgba(0, 0, 0, 0.2)',\n                height: 200,\n                margin: 0,\n                verticalAlign: 'middle',\n                paddingTop: 48,\n                paddingLeft: 20,\n                paddingRight: 20,\n                filter: 'blur(0px)'\n            }\n        };\n    }\n\n    render() {\n        return(<span>\n            {this.createProfileLinkByName()}\n            <Panel\n                isOpen={this.state.openPanel}\n                type={PanelType.medium}\n                onDismiss={() => this.closeProfilePanel()}\n                closeButtonAriaLabel=\"Close\"\n                styles={this.getStyles()}\n                headerText={this.createProfilePersona() as unknown as string}\n                isLightDismiss={true}\n                className={getDarkMode()}\n            >\n                <div className=\"mt-4\">\n                        <div\n                            dangerouslySetInnerHTML={{__html: this.state.account.note}}\n                            className=\"mt-2\"\n                        />\n                        {this.createProfileTable(this.state.account)}\n                </div>\n                <hr/>\n                <div className=\"my-2\">\n                    {this.showRecentStatuses()}\n                </div>\n            </Panel>\n        </span>);\n    }\n\n}\n\nexport default AccountPanel;","import React, { Component } from 'react';\nimport {\n    Persona,\n    PersonaSize,\n    Label,\n    DetailsList,\n    DetailsListLayoutMode,\n    SelectionMode\n} from 'office-ui-fabric-react';\nimport AccountPanel from '../AccountPanel';\nimport { getTrueInitials } from \"../../utilities/getTrueInitials\";\nimport Mastodon from 'megalodon';\n\ninterface IProfileProps {\n    who: any;\n    client: Mastodon;\n}\n\nclass ProfileUser extends Component<IProfileProps> {\n    who: any;\n    persona: any;\n    client: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.who = this.props.who;\n        this.client = this.props.client;\n    }\n\n    componentWillMount() {\n        this.persona = {\n            imageUrl: this.who.avatar,\n            imageInitials: getTrueInitials(this.who.display_name),\n            text: <AccountPanel client={this.client} account={this.who}/>,\n            secondaryText: '@' + this.who.acct,\n            tertiaryText: this.who.followers_count.toString() + ' followers, ' + this.who.following_count.toString() + ' following, ' + this.who.statuses_count + ' posts'\n        }\n    }\n\n    render() {\n        return (\n            <Persona\n                {... this.persona}\n                size={PersonaSize.size72}\n            />\n        );\n    }\n}\n\ninterface IProfileListProps {\n    who: any;\n}\n\nclass ProfileList extends Component<IProfileListProps> {\n\n    columns: any;\n    rows: any;\n    profile: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.profile = this.props.who;\n\n        this.columns = [\n            {\n                key: 'key',\n                fieldName: 'key',\n                data: \"string\",\n                maxWidth: 24,\n                isPadded: true\n\n            },\n            {\n                key: 'value',\n                fieldName: 'value',\n                data: 'string',\n                isPadded: true\n            }];\n\n        this.rows = [];\n\n        for (let item in this.props.who.fields) {\n            let value = this.props.who.fields[item].value.replace(\"class=\\\"invisible\\\"\", '');\n            this.rows.push({'key': this.props.who.fields[item].name, 'value': <p dangerouslySetInnerHTML={{__html: value}}/>})\n        }\n    }\n\n    render() {\n        return(\n            <DetailsList\n                columns={this.columns}\n                items={this.rows}\n                selectionMode={SelectionMode.none}\n                layoutMode={DetailsListLayoutMode.justified}\n            />\n            );\n    }\n}\n\n/**\n * A basic container for displaying the logged-in user's information\n * \n * @param who The logged-in user to display information about\n */\nclass ProfileContainer extends Component<IProfileProps> {\n    who: any;\n\n    componentWillMount() {\n        this.who = this.props.who;\n    }\n\n    render() {\n        return (\n            <div id = \"profile-container\" className=\"profile-container shadow rounded marked-area\">\n                <div className=\"profile-container-header\"\n                     style={{\n                         backgroundImage: 'url(\"' + this.who.header + '\")'\n                     }}>\n                </div>\n                <div className=\"container\">\n                    <div className=\"my-4\">\n                        <ProfileUser\n                            who={this.who}\n                            client={this.props.client}\n                        />\n                    </div>\n                    <Label>{this.who.source.note}</Label>\n                    <ProfileList who={this.who}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ProfileContainer;","import React, { Component } from 'react';\nimport {\n    TextField,\n    PrimaryButton,\n    DefaultButton,\n    Panel,\n    PanelType\n} from \"office-ui-fabric-react\";\nimport {getDarkMode} from \"../../utilities/getDarkMode\";\nimport Mastodon from 'megalodon';\n\ninterface IRegisterWindowState {\n    instanceUrl: string;\n    modal: boolean;\n    reauth: boolean;\n    reauth_from_cookie: boolean | null;\n    clientId: string;\n    clientSecret: string;\n    authUrl: string;\n    authCode: string;\n}\n\n/**\n * The window used for handling registration of Hyperspace\n * to the user.\n */\nclass RegisterWindow extends Component<any, IRegisterWindowState> {\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            instanceUrl: '',\n            modal: false,\n            reauth: false,\n            reauth_from_cookie: false,\n            clientId: '',\n            clientSecret: '',\n            authUrl: '',\n            authCode: ''\n        };\n\n        this.toggle = this.toggle.bind(this);\n        this.toggle_reauth = this.toggle_reauth.bind(this);\n        this._getErrorMessage = this._getErrorMessage.bind(this);\n        this._getErrorMessagePromise = this._getErrorMessagePromise.bind(this);\n    }\n\n    componentDidMount() {\n        if (localStorage.getItem(\"id\") !== null) {\n            this.setState({\n                reauth_from_cookie: true,\n                clientId: localStorage.getItem(\"id\") || \"\",\n                clientSecret: localStorage.getItem(\"secret\") || \"\",\n                authUrl: localStorage.getItem(\"authurl\") || \"\"\n            })\n        } \n    }\n\n    toggle() {\n        if (this.state.instanceUrl === '') {\n            this.setState({\n                instanceUrl: 'mastodon.social'\n            })\n        }\n        this.createAuthApp();\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    toggle_reauth() {\n        this.setState({\n            reauth: !this.state.reauth\n        });\n    }\n\n    closePanel() {\n        this.setState({\n            modal: false,\n            reauth: false\n        })\n    }\n    \n\n    updateInstanceUrl(e: any) {\n        let _this = this;\n        _this.setState({\n            instanceUrl: e.target.value\n        })\n    }\n\n    _getErrorMessage(value: string) {\n        return value.length > 0 ? '': 'This field cannot be blank.';\n    }\n\n    _getErrorMessagePromise(value: string) {\n        return new Promise(resolve => {\n            setTimeout(() => resolve(this._getErrorMessage(value)), 3000);\n        });\n    }\n\n    updateAuthCode(e: any) {\n        let _this = this;\n        _this.setState({\n            authCode: e.target.value\n        })\n    }\n\n    getMobilePWA() {\n        let agent = navigator.userAgent || navigator.vendor;\n        let instructions = '';\n\n        if (/iPad|iPhone|iPod/i.test(agent)) {\n            instructions = \"Tap the Share icon in Safari and then tap 'Add to Home Screen'.\";\n        } else if (/android/i.test(agent)) {\n            instructions = \"You may be already prompted to add Hyperspace to your home screen. Tap 'Add to Home Screen' to continue. If this option does not appear, try adding it through your browser's menu.\";\n        }\n\n        if (/windows phone/i.test(agent) || /android/i.test(agent) || /iPad|iPhone|iPod/i.test(agent)) {\n\n            // Detects if device is in standalone mode\n            const isInStandaloneMode = () => ('standalone' in window.navigator) && ((window.navigator as any).standalone);\n\n            // Checks if should display install popup notification:\n            if (!isInStandaloneMode()) {\n                return(\n                    <div className = \"container p-4 mt-4 marked-area shadow-sm rounded\">\n                        <h4>Using a mobile device?</h4>\n                        <p>You can easily add Hyperspace to your home screen: </p>\n                        <p>{instructions}</p>\n                    </div>\n                );\n            }\n\n        }\n        \n    }\n\n\n    createAuthApp() {\n        let _this = this;\n        const scopes = 'read write follow';\n        const baseurl = 'https://' + _this.state.instanceUrl;\n\n        Mastodon.registerApp('Hyperspace', {\n            scopes: scopes\n        }, baseurl).then((appData: any) => {\n            _this.setState({\n                clientId: appData.client_id,\n                clientSecret: appData.client_secret,\n                authUrl: appData.url\n            })\n            localStorage.setItem(\"id\", appData.client_id)\n            localStorage.setItem(\"secret\", appData.client_secret)\n            localStorage.setItem(\"authurl\", appData.url)\n        });\n\n        localStorage.setItem(\"baseurl\", baseurl);\n    }\n\n    getAccessToken() {\n        let _this = this;\n        Mastodon.fetchAccessToken(_this.state.clientId, _this.state.clientSecret, _this.state.authCode, localStorage.getItem(\"baseurl\") || \"\")\n            .then((tokenData) => {\n                let token = tokenData.accessToken;\n                console.log(token);\n                localStorage.setItem(\"access_token\", token);\n                localStorage.removeItem(\"id\");\n                localStorage.removeItem(\"secret\");\n                localStorage.removeItem(\"authurl\");\n                window.location.reload();\n            })\n            .catch((err) => console.error(err))\n    }\n\n    getPanelStyles() {\n        return {\n            closeButton: {\n                color: 'transparent',\n                    \"&:hover\": {\n                    color: 'transparent !important'\n                },\n                \"&:active\": {\n                    color: 'transparent !important'\n                },\n                backgroundImage: 'url(\\'close.svg\\')',\n                    backgroundPosition: 'center',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundSize: '50%'\n            }\n        }\n    }\n\n    render() {\n        let _this = this;\n        return (\n            <div>\n                {this.getMobilePWA()}\n                <div className = \"container shadow-sm p-4 mt-4 marked-area\">\n                    <h2>Sign in to Hyperspace</h2>\n                    <p>Welcome to Hyperspace, the fluffy client for Mastodon! We're more than happy to make your experience pleasant, but we'll need you to sign in to your Mastodon account first.</p>\n                    <p>\n                        Please sign in by entering your Mastodon instance's domain. This is typically the domain name of the instance or the URL used to access that instance.\n                    </p>\n                    <div>\n                        <TextField\n                            prefix=\"https://\"\n                            label=\"Host domain name\"\n                            description=\"The base URL of your Mastodon instance\"\n                            onBlur={e => this.updateInstanceUrl(e)}\n                            required={true}\n                            onGetErrorMessage={this._getErrorMessage}\n                            validateOnFocusOut\n                        />\n                        {\n                            this.state.reauth_from_cookie ?\n                            <div className = \"container rounded shadow p-3 my-2 marked-area\">\n                                <h5>Finish sign-in</h5>\n                                <p>\n                                    We noticed you didn't finish setting up Hyperspace. You can start over or pick up where you left off.\n                                </p>\n                                <PrimaryButton onClick={() => this.toggle_reauth()} style={{marginRight: 8}}>Finish sign-in</PrimaryButton>\n                                <DefaultButton onClick={() => this.toggle()}>Start over</DefaultButton>\n                            </div>:\n                            <PrimaryButton onClick={this.toggle} style={{marginRight: 8, marginTop: 4}}>Sign in</PrimaryButton>\n\n                        }\n                    </div>\n\n                    <Panel\n                        isOpen={this.state.modal}\n                        type={PanelType.medium}\n                        onDismiss={() => this.closePanel()}\n                        headerText=\"Give authorization access\"\n                        closeButtonAriaLabel=\"Close\"\n                        styles={this.getPanelStyles()}\n                        className={getDarkMode()}\n                        onRenderFooterContent = { () => {return(\n                            <div>\n                                <PrimaryButton\n                                    onClick={() => this.getAccessToken()}\n                                    style={{ marginRight: '8px' }}\n                                    text=\"Authorize\" />\n                                <DefaultButton\n                                    onClick={() => this.closePanel()}\n                                    text=\"Cancel\" />\n                            </div>\n                            );}\n                        }\n                    >\n                        <p>We'll need you to grant Hyperspace authorization to access your Mastodon account on <b>{_this.state.instanceUrl}</b>. Click 'Get Code' to authorize and then paste the authorization code here.</p>\n                        <DefaultButton\n                            href={this.state.authUrl}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >Get code</DefaultButton>\n                        <TextField\n                            label=\"Authorization code\"\n                            onBlur={e => this.updateAuthCode(e)}\n                        />\n                    </Panel>\n\n                    <Panel\n                        isOpen={this.state.reauth}\n                        type={PanelType.medium}\n                        onDismiss={() => this.closePanel()}\n                        headerText=\"Finish setup\"\n                        closeButtonAriaLabel=\"Close\"\n                        styles={this.getPanelStyles()}\n                        className={getDarkMode()}\n                        onRenderFooterContent = { () => {return(\n                            <div>\n                                <PrimaryButton\n                                    onClick={() => this.getAccessToken()}\n                                    style={{ marginRight: '8px' }}\n                                    text=\"Authorize\" />\n                                <DefaultButton\n                                    onClick={() => this.closePanel()}\n                                    text=\"Cancel\" />\n                            </div>\n                            );}\n                        }\n                    >\n                        <p>Paste the authroization token from when you signed in and authorized Hyperspace. If you have forgotten or need to re-assign access, click <b>Reacquire code</b> to reset. Optionally, you may cancel and press 'Start over'.</p>\n                        <DefaultButton\n                            href={this.state.authUrl}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >Reacquire code</DefaultButton>\n                        <TextField\n                            label=\"Authorization code\"\n                            onBlur={e => this.updateAuthCode(e)}\n                        />\n                    </Panel>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default RegisterWindow;","import React, { Component } from 'react';\nimport { ActivityItem, Dialog, DialogType, DialogFooter, Link, PrimaryButton, DefaultButton } from \"office-ui-fabric-react\";\nimport ReplyWindow from '../ReplyWindow';\nimport ProfilePanel from '../ProfilePanel';\nimport moment from 'moment';\nimport ThreadPanel from \"../ThreadPanel\";\nimport {anchorInBrowser} from \"../../utilities/anchorInBrowser\";\nimport Mastodon, { Status } from 'megalodon';\n\n\ninterface INotificationPaneProps {\n    client: Mastodon;\n}\n\ninterface INotificationPaneState {\n    notifications: [];\n    hideDeleteDialog: boolean | undefined;\n}\n\n/**\n * Small area dedicated to displaying, responding to, and clearing notifications.\n * \n * @param client The Mastodon client used to get, post, and delete notifications.\n */\nclass NotificationPane extends Component<INotificationPaneProps, INotificationPaneState> {\n\n    client: any;\n    notifListener: any;\n\n    constructor(props: any){\n        super(props);\n\n        this.client = this.props.client;\n\n        this.state = {\n            notifications: [],\n            hideDeleteDialog: true\n        }\n\n\n    }\n\n    componentDidMount() {\n        let _this = this;\n\n        this.notifListener = this.client.stream('/streaming/user');\n\n        this.notifListener.on('connect', () => {\n            this.client.get('/notifications', {limit: 7})\n                .then((resp: any) => {\n                    _this.setState({\n                        notifications: resp.data\n                    })\n                });\n        });\n\n        this.notifListener.on('notification', (notification: any) => {\n            let notif_set = _this.state.notifications;\n            notif_set.unshift(notification as never);\n            notif_set.splice(-1, 1);\n            _this.setState({\n                notifications: notif_set\n            });\n\n            this.sendDesktopNotification(notification)\n\n        })\n\n    }\n\n    componentDidUpdate() {\n        anchorInBrowser();\n    }\n\n    toggleDeleteDialog() {\n        this.setState({\n            hideDeleteDialog: !this.state.hideDeleteDialog\n        })\n    }\n\n    getDeleteLink() {\n        if (this.state.notifications.length > 0) {\n            return (<Link className=\"mr-2\" onClick={() => this.toggleDeleteDialog()}>Clear</Link>);\n        }\n    }\n\n    getDeleteDialog() {\n        return(\n            <Dialog\n                hidden={this.state.hideDeleteDialog}\n                onDismiss={() => this.toggleDeleteDialog()}\n                dialogContentProps={{\n                    type: DialogType.normal,\n                    title: 'Clear all notifications',\n                    subText: 'Are you sure you want to clear all of your notifications? This action cannot be undone.'\n                }}\n                modalProps={{\n                    isBlocking: true\n                }}\n            >\n                <DialogFooter>\n                    <PrimaryButton onClick={() => this.deleteNotifications()} text=\"Clear\"/>\n                    <DefaultButton onClick={() => this.toggleDeleteDialog()} text=\"Cancel\"/>\n                </DialogFooter>\n            </Dialog>\n        );\n    }\n\n    deleteNotifications() {\n        let _this = this;\n        this.client.post('/notifications/clear')\n            .then(() => {\n                _this.setState({\n                    notifications: []\n                })\n            });\n        this.toggleDeleteDialog()\n    }\n\n    getAuthorLink(account: any) {\n        return <ProfilePanel account={account} client={this.client}/>;\n    }\n\n    sendDesktopNotification(notification: any) {\n\n        let title = notification.account.display_name;\n        let body = \"\";\n        if (notification.type === \"follow\") {\n            title += \" followed you.\";\n        } else if (notification.type === \"mention\") {\n            if (notification.status.visibility === \"direct\") {\n                title += \" messaged you.\";\n            } else {\n                title += \" mentioned you in a status.\";\n            }\n        } else if (notification.type === \"favourite\") {\n            title += \" favorited your status.\";\n        } else if (notification.type === \"reblog\") {\n            title += \" boosted your status.\"\n        }\n\n        if (notification.status !== null || notification.status !== undefined) {\n            let tempDivElement = document.createElement('tempDiv');\n            tempDivElement.innerHTML = notification.status.content;\n            body = tempDivElement.textContent || tempDivElement.innerText || \"\";\n        }\n\n        let desktopNotification = new Notification(title, {\n            body: body\n        });\n\n        desktopNotification.onclick= () => { window.focus(); };\n    }\n\n    getActivityDescription(type: string, status: Status) {\n        if (type === \"follow\") {\n            return <span> <b>followed</b> you.</span>;\n        } else if (type === \"favourite\") {\n            return <span> <b>favorited</b> your status.</span>;\n        } else if (type === \"mention\") {\n            if (status !== undefined && status.visibility === \"direct\") {\n                return <span> <b>messaged</b> you.</span>;\n            } else {\n                return <span> <b>mentioned</b> you in a status.</span>;\n            }\n        } else if (type === \"reblog\") {\n            return <span> <b>boosted</b> your status.</span>;\n        }\n    }\n\n    getActivityComment(status: Status, type: string) {\n        if (status === null || status === undefined) {\n            return '';\n        } else {\n            return (\n                <div>\n                    <span className=\"my-2\" dangerouslySetInnerHTML={{__html: status.content}}/>\n                    {\n                        type === \"mention\" ?\n                            <span><ReplyWindow className=\"mr-2\" status={status} client={this.client} fullButton={false}/><ThreadPanel fromWhere={status.id} client={this.client} fullButton={false}/></span>:\n                            <span></span>\n                    }\n                </div>\n            );\n        }\n    }\n\n    getActivityDate(date: any) {\n        return moment(date).format(\"MMM Do, YYYY [at] h:mm A\");\n    }\n\n    createActivityList() {\n        let _this = this;\n        if (_this.state.notifications.length > 0) {\n            return (_this.state.notifications.map((notification:any, index) => {\n                let activityKey = [{\n                    activityDescription: [\n                        <span key={index}>\n                            {this.getAuthorLink(notification.account)}\n                            {this.getActivityDescription(notification.type, notification.status)}\n                        </span>\n                    ]\n                }];\n                return(\n                    <ActivityItem\n                        activityDescription={activityKey[0].activityDescription}\n                        activityPersonas={[{\n                            imageUrl: notification.account.avatar\n                        }]}\n                        comments={this.getActivityComment(notification.status, notification.type)}\n                        timeStamp={this.getActivityDate(notification.created_at)}\n                        className=\"mt-2\"\n                        key={index + Number(notification.id)}\n                    />\n                );\n            }));\n        } else {\n            return (<div className=\"mt-2\">\n                <h6>All clear!</h6>\n                <small>\n                    You don't have any new notifications. Interact with others in the fediverse to get the conversation going!\n                </small>\n            </div>);\n        }\n    }\n\n    render(){\n        return (\n            <div id=\"notification-pane\" className = \"container-fluid shadow rounded mt-4 p-4 marked-area\">\n                <div className=\"row\">\n                    <div className=\"col-10\">\n                        <h5><b>Notifications</b></h5>\n                    </div>\n                    <div className=\"col-2\">\n                        {this.getDeleteLink()}\n                        {this.getDeleteDialog()}\n                    </div>\n                </div>\n                {this.createActivityList()}\n            </div>\n        );\n    }\n\n}\n\nexport default NotificationPane;","import {registerIcons} from 'office-ui-fabric-react';\nimport React from \"react\";\n\n// Icons made available by Google via the Material Icon set.\n\nregisterIcons({\n    icons: {\n        'attachedFile': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zM6 20V4h7v5h5v11H6z\"/></svg>\n        ),\n        'boost': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92s2.92-1.31 2.92-2.92c0-1.61-1.31-2.92-2.92-2.92zM18 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM6 13c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm12 7.02c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z\"/></svg>\n        ),\n        'boostFill': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z\"/></svg>\n        ),\n        'darkModeOn': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69L23.31 12 20 8.69zM12 18c-.89 0-1.74-.2-2.5-.55C11.56 16.5 13 14.42 13 12s-1.44-4.5-3.5-5.45C10.26 6.2 11.11 6 12 6c3.31 0 6 2.69 6 6s-2.69 6-6 6z\"/></svg>\n        ),\n        'darkModeOff': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M20 15.31L23.31 12 20 8.69V4h-4.69L12 .69 8.69 4H4v4.69L.69 12 4 15.31V20h4.69L12 23.31 15.31 20H20v-4.69zM12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6z\"/></svg>\n        ),\n        'deletePost': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16 9v10H8V9h8m-1.5-6h-5l-1 1H5v2h14V4h-3.5l-1-1zM18 7H6v12c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7z\"/></svg>\n        ),\n        'directMessage': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M4 4h16v12H5.17L4 17.17V4m0-2c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2H4zm2 10h12v2H6v-2zm0-3h12v2H6V9zm0-3h12v2H6V6z\"/></svg>\n        ),\n        'emojiPicker': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm3.5-9c.83 0 1.5-.67 1.5-1.5S16.33 8 15.5 8 14 8.67 14 9.5s.67 1.5 1.5 1.5zm-7 0c.83 0 1.5-.67 1.5-1.5S9.33 8 8.5 8 7 8.67 7 9.5 7.67 11 8.5 11zm3.5 6.5c2.33 0 4.31-1.46 5.11-3.5H6.89c.8 2.04 2.78 3.5 5.11 3.5z\"/></svg>\n        ),\n        'favorite': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z\"/></svg>\n        ),\n        'favoriteFill': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"/></svg>\n        ),\n        'helpApp': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z\"/></svg>\n        ),\n        'homeApp': (<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M12 5.69l5 4.5V18h-2v-6H9v6H7v-7.81l5-4.5M12 3L2 12h3v8h6v-6h2v6h6v-8h3L12 3z\"/></svg>),\n        'linkApp': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5zm-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-2zm-3-4h8v2H8z\"/></svg>\n        ),\n        'localCommunity': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M12 7V3H2v18h20V7H12zM6 19H4v-2h2v2zm0-4H4v-2h2v2zm0-4H4V9h2v2zm0-4H4V5h2v2zm4 12H8v-2h2v2zm0-4H8v-2h2v2zm0-4H8V9h2v2zm0 -4H8V5h2v2zm10 12h-8v-2h2v-2h-2v-2h2v-2h-2V9h8v10zm-2-8h-2v2h2v-2zm0 4h-2v2h2v-2z\"/></svg>\n        ),\n        'overflowMenu': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path opacity=\".87\" fill=\"none\" d=\"M24 24H0V0h24v24z\"/><path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6-1.41-1.41z\"/></svg>\n        ),\n        'postStatus': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M14.06 9.02l.92.92L5.92 19H5v-.92l9.06-9.06M17.66 3c-.25 0-.51.1-.7.29l-1.83 1.83 3.75 3.75 1.83-1.83c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.2-.2-.45-.29-.71-.29zm-3.6 3.19L3 17.25V21h3.75L17.81 9.94l-3.75-3.75z\"/></svg>\n        ),\n        'private': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M9 13.75c-2.34 0-7 1.17-7 3.5V19h14v-1.75c0-2.33-4.66-3.5-7-3.5zM4.34 17c.84-.58 2.87-1.25 4.66-1.25s3.82.67 4.66 1.25H4.34zM9 12c1.93 0 3.5-1.57 3.5-3.5S10.93 5 9 5 5.5 6.57 5.5 8.5 7.07 12 9 12zm0-5c.83 0 1.5.67 1.5 1.5S9.83 10 9 10s-1.5-.67-1.5-1.5S8.17 7 9 7zm7.04 6.81c1.16.84 1.96 1.96 1.96 3.44V19h4v-1.75c0-2.02-3.5-3.17-5.96-3.44zM15 12c1.93 0 3.5-1.57 3.5-3.5S16.93 5 15 5c-.54 0-1.04.13-1.5.35.63.89 1 1.98 1 3.15s-.37 2.26-1 3.15c.46.22.96.35 1.5.35z\"/></svg>\n        ),\n        'public': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM4 12c0-.61.08-1.21.21-1.78L8.99 15v1c0 1.1.9 2 2 2v1.93C7.06 19.43 4 16.07 4 12zm13.89 5.4c-.26-.81-1-1.4-1.9-1.4h-1v-3c0-.55-.45-1-1-1h-6v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41C17.92 5.77 20 8.65 20 12c0 2.08-.81 3.98-2.11 5.4z\"/></svg>\n        ),\n        'replyApp': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z\"/></svg>\n        ),\n        'thread': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M15 4v7H5.17L4 12.17V4h11m1-2H3c-.55 0-1 .45-1 1v14l4-4h10c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm5 4h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1z\"/></svg>\n        ),\n        'unlinkApp': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M14.39 11L16 12.61V11zM17 7h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1 0 1.27-.77 2.37-1.87 2.84l1.4 1.4C21.05 15.36 22 13.79 22 12c0-2.76-2.24-5-5-5zM2 4.27l3.11 3.11C3.29 8.12 2 9.91 2 12c0 2.76 2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1 0-1.59 1.21-2.9 2.76-3.07L8.73 11H8v2h2.73L13 15.27V17h1.73l4.01 4.01 1.41-1.41L3.41 2.86 2 4.27z\"/></svg>\n        ),\n        'unlisted': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0zm0 0h24v24H0V0zm0 0h24v24H0V0zm0 0h24v24H0V0z\"/><path d=\"M12 6c3.79 0 7.17 2.13 8.82 5.5-.59 1.22-1.42 2.27-2.41 3.12l1.41 1.41c1.39-1.23 2.49-2.77 3.18-4.53C21.27 7.11 17 4 12 4c-1.27 0-2.49.2-3.64.57l1.65 1.65C10.66 6.09 11.32 6 12 6zm-1.07 1.14L13 9.21c.57.25 1.03.71 1.28 1.28l2.07 2.07c.08-.34.14-.7.14-1.07C16.5 9.01 14.48 7 12 7c-.37 0-.72.05-1.07.14zM2.01 3.87l2.68 2.68C3.06 7.83 1.77 9.53 1 11.5 2.73 15.89 7 19 12 19c1.52 0 2.98-.29 4.32-.82l3.42 3.42 1.41-1.41L3.42 2.45 2.01 3.87zm7.5 7.5l2.61 2.61c-.04.01-.08.02-.12.02-1.38 0-2.5-1.12-2.5-2.5 0-.05.01-.08.01-.13zm-3.4-3.4l1.75 1.75c-.23.55-.36 1.15-.36 1.78 0 2.48 2.02 4.5 4.5 4.5.63 0 1.23-.13 1.77-.36l.98.98c-.88.24-1.8.38-2.75.38-3.79 0-7.17-2.13-8.82-5.5.7-1.43 1.72-2.61 2.93-3.53z\"/></svg>\n        ),\n        'uploadMedia': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M20 4v12H8V4h12m0-2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.5 9.67l1.69 2.26 2.48-3.1L19 15H9zM2 6v14c0 1.1.9 2 2 2h14v-2H4V6H2z\"/></svg>\n        ),\n        'warningApp': (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z\"/></svg>\n        )\n    }\n});\n","import React, {Component} from 'react';\nimport ComposeWindow from './components/ComposeWindow';\nimport Navbar from './components/Navbar';\nimport Timeline from './components/Timeline';\nimport ProfileContainer from './components/ProfileContainer';\nimport RegisterWindow from './components/RegisterWindow';\nimport NotificationPane from './components/NotificationPane';\nimport {anchorInBrowser} from './utilities/anchorInBrowser';\nimport Mastodon from 'megalodon';\nimport {loadTheme} from 'office-ui-fabric-react';\nimport {getDarkMode} from './utilities/getDarkMode';\nimport './components/CustomIcons';\nimport 'popper.js';\nimport './assets/css/bootstrap.css';\nimport './assets/css/bootstrap-grid.css';\nimport './assets/css/bootstrap-reboot.css';\nimport 'office-ui-fabric-react/dist/css/fabric.min.css';\nimport './assets/css/default.css';\n\nloadTheme({\n    palette: {\n        themePrimary: '#5c2d91',\n        themeLighterAlt: '#f7f4fb',\n        themeLighter: '#dfd3ed',\n        themeLight: '#c6b0de',\n        themeTertiary: '#936fbd',\n        themeSecondary: '#6b3e9f',\n        themeDarkAlt: '#532983',\n        themeDark: '#46226e',\n        themeDarker: '#331951',\n        neutralLighterAlt: '#f8f8f8',\n        neutralLighter: '#f4f4f4',\n        neutralLight: '#eaeaea',\n        neutralQuaternaryAlt: '#dadada',\n        neutralQuaternary: '#d0d0d0',\n        neutralTertiaryAlt: '#c8c8c8',\n        neutralTertiary: '#c2c2c2',\n        neutralSecondary: '#858585',\n        neutralPrimaryAlt: '#4b4b4b',\n        neutralPrimary: '#333333',\n        neutralDark: '#272727',\n        black: '#1d1d1d',\n        white: '#ffffff',\n    }\n});\n\nclass App extends Component {\n\n    client: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.checkLocalStorage = this.checkLocalStorage.bind(this);\n        this.createMastodonApp = this.createMastodonApp.bind(this);\n\n        if (this.checkLocalStorage()) {\n\n            this.createMastodonApp();\n\n            this.state = {\n                account: ''\n            };\n\n            this.getAccountDetails();\n\n        }\n    }\n\n    checkLocalStorage() {\n        return localStorage.getItem(\"baseurl\") != null && localStorage.getItem(\"access_token\") != null;\n    }\n\n    createMastodonApp() {\n        let token = localStorage.getItem('access_token');\n        let url = localStorage.getItem('baseurl');\n        this.client = new Mastodon(token || \"\", url + '/api/v1');\n    }\n\n    getAccountDetails() {\n        let _this = this;\n        if (this.client != null) {\n            this.client.get(\"/accounts/verify_credentials\")\n                .then((resp: any) => {\n                    localStorage.setItem(\"account\", JSON.stringify(resp.data));\n                    _this.setState({\n                        account: resp.data\n                    });\n                });\n        }\n    }\n\n    componentWillMount() {\n        this.getAccountDetails();\n        if (!('Notification' in window))\n            console.log('Notifications aren\\'t supported on this browser.');\n        else {\n            let x = Notification.requestPermission\n        }\n            \n    }\n\n    componentDidMount() {\n        anchorInBrowser();\n    }\n\n    hideMacScrollbars() {\n        if (navigator.userAgent.includes(\"Electron\") && navigator.appVersion.indexOf(\"Mac\") !== -1) {\n            return 'hidden-scroll';\n        }\n    }\n\n    render() {\n        return (\n            <div className={getDarkMode() + \" \" + this.hideMacScrollbars()}>\n              <nav>\n                <Navbar/>\n              </nav>\n              <div className = \"container app-container\">\n                <div className = \"row\">\n                  <div className = \"col-sm-12 col-lg-8\">\n                      {\n                          this.client ?\n                              <div>\n                                  <ComposeWindow client={this.client}/>\n                                  <hr/>\n                              </div>:\n                              <span/>\n                      }\n\n                    <div className=\"container\">\n                        {\n                            this.checkLocalStorage() ? <Timeline client={this.client}/>: <RegisterWindow/>\n                        }\n                    </div>\n                  </div>\n                  <div className = \"col-sm-12 col-md-4 d-none d-lg-block m-0 p-0 profile-container\">\n                  {\n                            this.checkLocalStorage() ?\n                                <div>\n                                    {\n                                        this.client ? <div>\n                                                {\n                                                    localStorage.getItem('account') ?\n                                                        <ProfileContainer client={this.client} who={JSON.parse(localStorage.getItem('account') || \"\")}/>:\n                                                        <div className=\"p-4\">\n                                                            <h3>Hang tight!</h3>\n                                                            <p>Reload Hyperspace for your profile card to update.</p>\n                                                        </div>\n\n                                                }\n                                            <NotificationPane client = {this.client}/>\n                                        </div>:\n                                            <span/>\n                                    }\n                                </div>:\n                                <div>\n                                    <div className = \"container rounded shadow-sm mt-4 p-4 marked-area\">\n                                        <span className = \"ml-auto\" style={{textAlign: \"center\"}}><img src=\"logomark.svg\" width=\"100%\" alt=\"Hyerspace logo\"/></span>\n                                        <h4>What is Hyperspace?</h4>\n                                        <p>\n                                            Hyperspace is a client for the <a href=\"https://joinmastodon.org\">Mastodon</a> social network. It allows users to sign in to their Mastodon account and view timelines, post statuses (toots), and interact with others in the federated universe (fediverse).\n                                        </p>\n                                        <small className=\"text-muted\">\n                                            Hyperspace is free software licensed under the <a href=\"https://www.gnu.org/copyleft/lesser.html\">GNU Lesser General Public License</a>. Some libraries used are licensed uder other free software licenses such as the GPL and MIT licenses.\n                                        </small>\n                                    </div>\n                                </div>\n                        }\n                  </div>\n                </div>\n              </div>\n            </div>\n\n        );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    console.warn(\"You're running Hyperspace in developer mode.\\nExpect delays in streaming of timelines.\");\n}\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}